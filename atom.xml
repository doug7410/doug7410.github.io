<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Doug S.]]></title>
  <link href="http://doug7410.github.io/atom.xml" rel="self"/>
  <link href="http://doug7410.github.io/"/>
  <updated>2014-08-04T20:47:11+00:00</updated>
  <id>http://doug7410.github.io/</id>
  <author>
    <name><![CDATA[Doug Steinberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I Added Images to My Postit App With AJAX and MetaInspector]]></title>
    <link href="http://doug7410.github.io/blog/2014/08/04/add-image-to-post-with-ajax-and-metainspector/"/>
    <updated>2014-08-04T15:07:35+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/08/04/add-image-to-post-with-ajax-and-metainspector</id>
    <content type="html"><![CDATA[<p>In <a href="gotealeaf.com">Tealeaf Academy&rsquo;s</a> second course <a href="http://www.gotealeaf.com/curriculum#!rails">Rapid Prototyping with Ruby on Rails</a> we built an app called Postit. It&rsquo;s bassically a clone of the popular site Reddit.com. Of of the featues of this app is to add a URL to the site you are posting about. I decided to add a feature for grabbing an image on that URL. To do this I used some AJAX and a web scraping gem. Here is what the page looks like in action.</p>

<p><img src="http://doug7410.github.io/images/image_scrapper.jpg"></p>

<p>Here is the link to the actual working app <a href="http://shielded-retreat-9536.herokuapp.com/">http://shielded-retreat-9536.herokuapp.com/</a> <!--more--></p>

<p>You&rsquo;ll have to register and create a post in order to try out the image feature.</p>

<h2>Here the rundown on how I did it.</h2>

<h3>1. First add a column to the database for the image</h3>

<p>The first thing I had to do was add a <code>post_image</code> column to the <code>posts</code> table. I went into the console and created a migration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails generate migration add_post_image_to_posts</span></code></pre></td></tr></table></div></figure>


<p>This created the migration file. Below is the file with the code to add the new column.</p>

<figure class='code'><figcaption><span>20140711160221_add_post_image_to_posts.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddPostImageToPosts</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">:post_image</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. the basic workflow for getting the images from a URL</h3>

<p>In this application a post has 5 attributes (not including timestamps). They are:</p>

<ul>
<li>title</li>
<li>url</li>
<li>description</li>
<li>slug</li>
<li>post_image</li>
<li>user_id</li>
</ul>


<p>I&rsquo;m using a web scraper called <a href="https://github.com/jaimeiniesta/metainspector">metainspector</a> to fetch an array of images from the <code>url</code> given to the post. To access the images returned by metainspector I have to take following steps:</p>

<ol>
<li>create a link that sends an HTTP request to a <code>post_image</code> action in the <code>post_controller</code></li>
<li>in that controller action is a method that uses the post <code>url</code></li>
<li>inside that method, <strong>metainspector</strong> uses the <code>url</code> to return an array of images that are on the url&rsquo;s web page</li>
<li>a list of images is shown to choose an image to the post</li>
</ol>


<p>That&rsquo;s the basic outline of the workflow for getting the images. Here is how I did it.</p>

<h3>3. The workflow in the UI</h3>

<p>I&rsquo;m using AJAX and a very slick JavaScript interface in the UI to select the image. The workflow in the UI works like this:</p>

<ol>
<li> when creating or editing a post, enter a url in the URL form field</li>
<li> click on the &ldquo;Choose Post Image&rdquo; button</li>
<li> under the input and button a hidden div slides down with all the images generated from the URL</li>
<li> the user clicks on an image to choose it and assign it to the post</li>
</ol>


<p>Rails has a very easy way to AJAXify a link by adding <code>remote: true</code> to a <code>link_to</code> helper method. Here is the section of the form with the URL field and the link:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&quot;control-group&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:url</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:url</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Choose Post Image&#39;</span><span class="p">,</span> <span class="n">post_image_path</span><span class="p">,</span> <span class="ss">remote</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">method</span><span class="p">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;btn btn-primary&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;choose_img_btn&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two things about this link use some special rails magic</p>

<ul>
<li><code>remote" true</code></li>
<li><code>method: 'post'</code></li>
</ul>


<p><code>remote: true</code> turns this into an AJAX link. It&rsquo;s equivalent to writing a JavaScript event handler that process a an AJAX call when the link is clicked.</p>

<p><code>method: 'post'</code> turns the link in to a POST request as opposed to a GET request.</p>

<p>Both of these are necessary for the next step, the controller action.</p>

<p>When the user add a URL to the field and then clicks the &ldquo;Choose Post Image&rdquo; button it uses this rout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/post_image&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;posts#post_image&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The link goes to the <code>post_image_path</code> , so a click on this link sends a POST request to the <code>post</code> controller&rsquo;s <code>post_image</code>  action , and because the link has the <code>remote: true</code> parameter, the format is JavaScript.</p>

<h3>4. what&rsquo;s happening in the <code>post_image</code> action in the <code>post</code> controller</h3>

<p>Here is the action in the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">post_image</span>
</span><span class='line'>  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@url</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:url</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here there are 3 things happening.
  - a new @post object is created. This is necessary because the post model has a method that fetches the images. So you need a post object to call that method
  - a @url variable is created from the URL field in the form. If you look at the &ldquo;Choose Post Image&rdquo; link you probably notice there is no URL parameter anywhere. I used JavaScript to dynamically add the url as a parameter to the link.
  - lastly, the action renders the default template <code>post_image.js.erb</code> . Since the request coming into the action is JavaScript formatted, the <code>respond_to</code> block send the request off to the <code>post_image.js.erb</code> template.</p>

<p> I should probably take a step back and show you the JavaScript that added the URL parameter to the link.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="c1">// this makes the &quot;choose image button add the url parameter to the end of the link&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choose_img_btn&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#post_url&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choose_img_btn&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">,</span> <span class="nx">link</span> <span class="o">+</span> <span class="s2">&quot;?url=&quot;</span> <span class="o">+</span> <span class="nx">url</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#post_url&quot;</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">url</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#post_url&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">new_link</span> <span class="o">=</span> <span class="p">(</span><span class="nx">link</span> <span class="o">+</span> <span class="s2">&quot;?url=&quot;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choose_img_btn&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">,</span> <span class="nx">new_link</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically what this does is append <code>?url=</code>  and whatever text is in the URL feild to the end of the link.</p>

<p>The link by default points to the <code>/post_image</code> path. So if you type <code>www.cnn.com</code> into the URL field, the link will automatically be turned into <code>/post_image?www.cnn.com</code></p>

<h3>5. inside the JavaScript template  <code>post_image.js.erb</code></h3>

<p>After the response goes through the controller action it ends up in the JavaScript template. Theis is where all of the cool AJAX stuff happens. Here is what the template looks like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">images_html</span> <span class="o">=</span> <span class="s1">&#39;&lt;ul class=&quot;choose_img_thumbs&quot;&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;%</span> <span class="k">if</span> <span class="err">@</span><span class="nx">post</span><span class="p">.</span><span class="nx">url_images</span><span class="p">(</span><span class="err">@</span><span class="nx">url</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;error&quot;</span>  <span class="o">%&gt;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="err">@</span><span class="nx">post</span><span class="p">.</span><span class="nx">url_images</span><span class="p">(</span><span class="err">@</span><span class="nx">url</span><span class="p">).</span><span class="nx">each</span> <span class="k">do</span> <span class="o">|</span><span class="nx">image</span><span class="o">|</span> <span class="o">%</span>
</span><span class='line'>    <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;%= image_tag image , id: &quot;url_image&quot; %&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span><span class='line'>  <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/ul&gt;&#39;</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="k">else</span> <span class="o">%&gt;</span>
</span><span class='line'>  <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;You did not enter a valid URL. Please try again.&#39;</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#images_container&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">images_html</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#image_choices&quot;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#image_choices img&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#post_post_image&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#image_choices&quot;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#post_image&quot;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">().</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&quot;&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot; /&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>To give you an idea of my though process I&rsquo;ll try to explain what this file does.</strong></p>

<ul>
<li>It creates an unordered list of images and then places them into a div with the ID of <code>images_container</code> .</li>
<li>Once the image list in inside the <code>images_container</code> , that div slides down. Keep in mind this is all happening on the create or edit post page.</li>
<li>After the <code>images_container</code> slides down, the user clicks on an image to choose it and assign it to the post.</li>
<li>once the chosen image has been clicked the <code>images_container</code> slides up and another hidden div <code>post_image</code> gets the chosen image inserted into it and slides down.</li>
</ul>


<p>The important part of this code is <code>@post.url_images(@url)</code> . Here is the <code>url_images</code> method in the Post model</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">url_images</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ext</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span><span class="s1">&#39;jpg&#39;</span><span class="p">,</span><span class="s1">&#39;jpeg&#39;</span><span class="p">,</span><span class="s1">&#39;png&#39;</span><span class="p">,</span><span class="s1">&#39;gif&#39;</span><span class="p">,</span><span class="s1">&#39;bmp&#39;</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">ext</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="n">url</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>   <span class="k">begin</span>
</span><span class='line'>     <span class="n">page</span> <span class="o">=</span> <span class="no">MetaInspector</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>     <span class="n">page</span><span class="o">.</span><span class="n">images</span>
</span><span class='line'>   <span class="k">rescue</span>
</span><span class='line'>     <span class="s2">&quot;error&quot;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are basically 3 important things going on here
  - the URL passes in is a link that goes directly to an image
  - the URL is a web page with images on it
  - there is a problem with the URL, in which case the string &ldquo;error&rdquo; is returned.</p>

<p>The first thing that happens is the URL is split apart on the dots (.) . If it&rsquo;s  an image URL like <code>www.mysite.com/myimage.jpg</code> the first condition in the if statement will execute and an array with the URL string will be returned.</p>

<p>If that&rsquo;s not the case the URL will be passed into MetaInspector and assigned to the <code>page</code> variable. MetaInspector scrapes information from a given URL and gives you several methods for accessing that data. In this case I just want the images. <code>page.images</code> returns an array of all the images retrieved by MetaInspector</p>

<p>If MetaInspector has a problem with the URL passed in it will throw an exception and the whole app will fail. To get around this I used a <code>begin and rescue block</code>. This way if there are any exception thrown by MetaInspector it will execute the rescue block and just return the string &ldquo;error&rdquo;.</p>

<p>So that&rsquo;s the first thing going on the JavaScript template. The first line is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="o">&lt;%</span> <span class="k">if</span> <span class="err">@</span><span class="nx">post</span><span class="p">.</span><span class="nx">url_images</span><span class="p">(</span><span class="err">@</span><span class="nx">url</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;error&quot;</span>  <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>so as long as there is no error, this section will execute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="o">&lt;%</span> <span class="err">@</span><span class="nx">post</span><span class="p">.</span><span class="nx">url_images</span><span class="p">(</span><span class="err">@</span><span class="nx">url</span><span class="p">).</span><span class="nx">each</span> <span class="k">do</span> <span class="o">|</span><span class="nx">image</span><span class="o">|</span> <span class="o">%</span>
</span><span class='line'>  <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;%= image_tag image , id: &quot;url_image&quot; %&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="nx">images_html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/ul&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates the list of images inside an unordered list and assigns it to the <code>images_html</code> variable.</p>

<p>That list is put into the <code>#images_container</code> with this code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#images_container&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">images_html</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then this part slides down the <code>#image_choices</code> and when an image is clicked 3 things happen</p>

<ul>
<li>this line <code>$("#post_post_image").val($(this).attr('src'));</code> adds the URL of the clicked image to a hidden form input  <code>"#post_post_image"</code></li>
<li>the <code>#image_choices</code> div slides up</li>
<li>the image is added to the <code>#post_image</code> div and it slides down</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#image_choices&quot;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#image_choices img&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#post_post_image&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#image_choices&quot;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#post_image&quot;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">().</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;img src=&quot;&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot; /&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. finishing up the feature&rsquo;s workflow</h3>

<p>At this pont all that is left is the post has to be saved and the image URL will be added it the <code>post_image</code> column. This is because there is a hidden form input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span>  <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:post_image</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope that made some sense and now you have some idea of how I did it. I took a combination of JavaScript, jQuery, AJAX, a scrapper gem, and standard rails MVC. I&rsquo;m sure there are things that can be improved on and tweaked to please feel free to leave feedback.</p>

<p>Thanks for reading and please send me any feedback to <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#100;&#115;&#116;&#101;&#105;&#110;&#45;&#x70;&#104;&#105;&#x6e;&#x73;&#x40;&#x68;&#x6f;&#116;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;&#46;">&#x64;&#115;&#116;&#101;&#x69;&#110;&#x2d;&#x70;&#104;&#x69;&#x6e;&#115;&#x40;&#104;&#111;&#x74;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;&#x2e;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Project - Punch Clock App]]></title>
    <link href="http://doug7410.github.io/blog/2014/07/16/rails-project-punch-clock-app/"/>
    <updated>2014-07-16T22:45:21+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/07/16/rails-project-punch-clock-app</id>
    <content type="html"><![CDATA[<p><img src="http://doug7410.github.io/images/punch-clock.jpg"></p>

<p>So I&rsquo;m done with week 2 of the Tealeaf Ruby on Rails course and I&rsquo;ve learned to do basic CRUD ( create, read, update, delete) actions using Rail&rsquo;s resourses , models, form helpers, and views.</p>

<p>I thought this would be a good time start on a side project I had saved in my back pocket. This would be a good chance to practice what I&rsquo;ve learned as well as start my own project. The idea is pretty simple, it&rsquo;s called &ldquo;Punch Clock&rdquo;, for now at least. It allows you to create different jobs or tasks, and then track the time you spent working on them. Here  the Github repository</p>

<p><a href="https://github.com/doug7410/punch-clock">https://github.com/doug7410/punch-clock</a></p>

<h4>The image above is what it looks like so far.</h4>

<p>You can also click on the Job Title&rsquo;s  to see that job&rsquo;s detail&rsquo;s page There you will see a list of all the punches you&rsquo;ve made. Each punch out has the &ldquo;time on the clock&rdquo; next to it. So if you punch in at 8:00AM and punch out at 10:35AM, that punch will show your time like this &ldquo;0002:35:00&rdquo; . You just worked for 2 hours and 35 minutes! Go take a coffee break!</p>

<p>The page will also show the total time worked on that job. Here&rsquo;s a screenshot of the <strong> job detail page </strong>.</p>

<p><img src="http://doug7410.github.io/images/punch-clock2.jpg"></p>

<p><strong> So far my list of features for this app are: </strong></p>

<ul>
<li>You can create jobs</li>
<li>each job has a title and  description</li>
<li>each job has punches</li>
<li>each punch &ldquo;out&rdquo; uses the previous punch &ldquo;in&rdquo; to calculate the time on the clock</li>
<li>each job has a running total of all the time worked</li>
</ul>


<p>That&rsquo;s it for now. Here is a list of what I want to add on</p>

<ul>
<li>add user authentication</li>
<li>use javascript to have running clocks</li>
<li>add notes to each punch so you can keep track of what was done during that time period</li>
<li>have the ability to edit or delete punched</li>
<li>be able to manually add punches</li>
<li>ability to edit jobs and user profiles</li>
<li>add hourly rate to jobs to keep track of earnings</li>
<li>add reports to break down time worked by day, month, date-range, etc..</li>
</ul>


<p>That&rsquo;s all I have for now, but there are lots of possibilities with this.  I also want to have a nice graphic design, but that&rsquo;s not as important as the MVP right now.</p>

<p>If you have any suggestions or questions please leave in the comments. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf - Rapid Prototyping With Ruby on Rails Cousre Done!]]></title>
    <link href="http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done/"/>
    <updated>2014-07-16T16:10:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done</id>
    <content type="html"><![CDATA[<p><img src="http://doug7410.github.io/images/postit.jpg"></p>

<p>It&rsquo;s been a few weeks since I last posted about my journey to becoming a Ruby on Rails developer through <a href="http://gotealeaf.com">Tealeaf Academy</a> . At this point I&rsquo;m done with their second course &ldquo;Rapid Prototyping with Ruby on Rails&rdquo; . This blog post is actually my final assignment for the course. I have learned to build a basic rails app from start to finish and I&rsquo;ve even been able to apply some custom features that weren&rsquo;t discussed in the course. <!--more--></p>

<p>Here is the final project <a href="http://shielded-retreat-9536.herokuapp.com">http://shielded-retreat-9536.herokuapp.com</a>
Here is my code on GitHub - <a href="https://github.com/doug7410/postit-app">https://github.com/doug7410/postit-app</a></p>

<h4>I&rsquo;ve learned way to much to go into detail about everything so here is a summery of all the things I learned while building this rails application.</h4></h4>

<ul>
<li>Model View Controller</li>
<li>Rails Migrations</li>
<li>Active Record</li>
<li>Active Record Associations

<ul>
<li>1 to Many Associations</li>
<li>Many to Many associations</li>
<li>Polymorphic associations</li>
</ul>
</li>
<li>RESTful routes</li>
<li>Custom Routes</li>
<li>ERB templates</li>
<li>User Authentication with &ldquo;has_secure_password&rdquo;</li>
<li>Helper Methods</li>
<li>Modules</li>
<li>Creating a Gem</li>
<li>Rails flavored AJAX</li>
</ul>


<p>I&rsquo;m probably leaving some things out, so I might have to go back and edit that list. In my <a href="http://dsp-websolutions.com/portfolio/2014/06/25/journey-to-ror-developer-part-3">last post</a> I talked about MVC and Rails Migrations. Now I&rsquo;ll talk a little about <strong>Active Record</strong> and <strong>Associations</strong> .</p>

<h3>What is Active Record?</h3>

<p>Active record is an ORM (Object Relational Mapping system).  Active Record allows Rails to interact with a database and and also stores information about the relationships between tables in the database. All with out ever writing SQL.This is really incredible if you ever had to write SQL to interact with a database! Active Record completely eliminates that whole layer of thinking.</p>

<p>Here&rsquo;s a simple example of the power and convenience of Active Record. Here is a simple table and it&rsquo;s model.</p>

<p><strong>dogs table</strong>(tables are always named in plural form)</p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
  </tr>
</table>


<p><strong>Dog model</strong> dog.rb (model names are always singular)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the Dog class is completely empty aside from the fact that it inherits from ActiveRecord::Base. The Dog class now has access to all the Active Record methods. If we wanted to select a row form the dogs table you can do so like this in rails console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">Dog</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Rocky&quot;</span><span class="p">,</span> <span class="ss">weight</span><span class="p">:</span> <span class="s2">&quot;15&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would return the first record in the &lsquo;dogs&rsquo; table. Active record has many other methods for returning rows form a table. Let&rsquo;s say we wan&rsquo;t the dog with an ID of 2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">Dog</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Gump&quot;</span><span class="p">,</span> <span class="ss">weight</span><span class="p">:</span> <span class="s2">&quot;45&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="s2">&quot;11&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p> Active Record also creates getter and setter methods for every column in the database table. So you can do things like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Gump&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;11&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">12</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="nb">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Gump&quot;</span><span class="p">,</span> <span class="ss">weight</span><span class="p">:</span> <span class="s2">&quot;45&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="s2">&quot;12&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Active record makes working with data a breeze. If we had to write SQL just to do the few examples I have above it would take way more code and would be way less pretty.</p>

<h3>The other great thing about Active Record is Associations</h3>

<p>Associations are used to create relationships between tables. There are 2 ways tables can be related</p>

<ul>
<li>1 to Many</li>
<li>Many to Many</li>
</ul>


<h4>Here is another table that can relate to the dogs table:</h4>

<p><strong>owners</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Frank</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Rachel</td>
  </tr>
</table>


<p>In this example we&rsquo;re going to say a dog has one owner, and an owner can have many dogs. This a a typical one to many relationship. The Dog and Owner models will look like this.</p>

<p><strong>Dog model</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:owner</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Owner model</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Owner</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:dogs</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing this will require one column to be added to the dogs table. A foreign key of <code>owner_id</code></p>

<p><strong>dogs table</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
    <th>owner_id</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
    <td>1</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
    <td>1</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
    <td>2</td>
  </tr>
</table>


<p>Rails will automatically know to use <code>owner_id</code> because we stated in the Dog model that a dog <code>belongs_to :owner</code> . The foreign key column always goes in the table on the <code>belongs_to</code> side of a relation.</p>

<p>Now we can do things like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">Dog</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Gump&quot;</span><span class="p">,</span> <span class="ss">weight</span><span class="p">:</span> <span class="s2">&quot;45&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="s2">&quot;12&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">dog</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Frank&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">owner</span> <span class="o">=</span> <span class="no">Owner</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">Owner</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Rachel&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">owner</span><span class="o">.</span><span class="n">dogs</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Jenny&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s a little taste of what active record can do and how classes can be associated.</p>

<p>Here is a great reference for all Active Record - <a href="http://guides.rubyonrails.org/active_record_basics.html">http://guides.rubyonrails.org/active_record_basics.html</a></p>

<p>Rails uses a lot of conventions to make all of this magic work, but if you can remember them you can be very productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Say Hello to Rails and All of It's Magic!]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic/"/>
    <updated>2014-06-25T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic</id>
    <content type="html"><![CDATA[<p><img src="http://doug7410.github.io/images/roads-22.jpg"></p>

<p>I&rsquo;m through the first week of course 2 with Tealeaf Academy (Rapid prototyping with Ruby on Rails) It&rsquo;s been very demanding to say the least, but still very fun and engaging.  There was a lot of information to absorb and I learned a lot.</p>

<p>Before week 1 officially started, I was asked to read this <a href="http://guides.rubyonrails.org/getting_started.html">Getting Started with Rails guide</a>. I did actually get through it and build the example project, but by the end I wasn&rsquo;t very confident about Rails, which is ok, because that&rsquo;s what the course is for.</p>

<!--more-->


<p>The first lecture in the course cleared a lot of things up for me. Ruby on Rails (or RoR) is basically split up into 5 main parts and follows a MVC  (Model View Controller) pattern:</p>

<h3>The five parts are:</h3>

<ol>
<li> The Router</li>
<li> The Controller</li>
<li> The Model</li>
<li> The Database</li>
<li> The View</li>
</ol>


<h2>Here is my quick explanation of  how rails works:</h2>

<ol>
<li> A HTTP request comes into the <strong>Router</strong></li>
<li> the router directs that request to the <strong>Controller</strong></li>
<li> depending on what is in the request, the **Controller will do 1 of 3 things

<ul>
<li>redirect to the router Router**</li>
<li>render a <strong>View</strong> template

<ul>
<li>or reach into the <strong>Model</strong>. The <strong>Model</strong> can then retrieve data from the <strong>Database</strong> , send that back to the  <strong>Controller</strong>, and then render a <strong>View</strong></li>
</ul>
</li>
<li><h4>Here is a nice diagram of rails:**</h4></li>
</ul>
</li>
</ol>


<p><img src="http://doug7410.github.io/images/request_response_mvc.jpg"></p>

<h3>This part of the course focused mostly on the Model layer</h3>

<p>Here is what a simple model looks like in Rails</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every model in Rails corresponds to a table in the database. The above model would belong to a table named &lsquo;posts&rsquo;. Rails has several conventions for naming models, classes, tables, and lots of other things. This is what allows the &ldquo;Rails Magic&rdquo; to happen. For a model three naming conventions must be followed.</p>

<ol>
<li> the name of the model file must be singular, lowercase, and snake case. So the Post model would be in a file called &lsquo;post.rb&rsquo;. A &lsquo;PostCategory&rsquo; model would be in &lsquo;post_category.rb&rsquo;</li>
<li> the name of the model class should be singular and CamelCase. ex: &lsquo;Post&rsquo;, or &lsquo;PostCategory&rsquo;</li>
<li> the name of the table must be  plaural form, and snake case. ex: &lsquo;posts, or &#8216;post_categories&rsquo;</li>
</ol>


<p>Figuring out the name Rails expects can sometimes be tricky, so there is a built in method you can use in rails console to figure those tricky ones out. Check out the code below in rails console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="s2">&quot;Goose&quot;</span><span class="o">.</span><span class="n">tableize</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;gooses&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The model name here is Goose. Calling the <code>tableize</code> method on the string &ldquo;Goose&rdquo; tells you rails expects the table to be called &lsquo;gooses&rsquo;. The model file for this would be goose.rb .</p>

<p>To create tables in Rails there is a great built in feature called <strong><em>migrations</em></strong>. To create a migration you first run this command in termianl in your project directory</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="n">migration</span> <span class="n">create_gooses</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example gooses is the table name. If you wanted to make a posts table you would just replace gooses with posts.  This will create a file in the <code>db/migrate</code> directory that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateGooses</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:gooses</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now lets give gooses a name, height, and timestamps columns.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateGooses</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:gooses</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:height</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li> t.string :name (creates a column called name with a type of string)</li>
<li> t.integer :height (creates a column called height with a type of integer)</li>
<li> t.timestamps creates two column (created_at and updated_at) Rails automatially fills these in when records are created or updated. Pretty neat right!</li>
</ol>


<p>After you finish creating your migration file you run this command in your terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have bundler installed you might need to run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create the table in your database, and you never have to write a single line of SQL, now that&rsquo;s awesome!</p>

<h4>gooses table</h4>

<table class="table">
  <tr>
    <th>id</th>
    <th>name</th>  
    <th>height</th>
    <th>created_at</th>
    <th>updated_at</th>
  </tr>  
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
</table>


<p>As you can see above, the rails automaically added <em>id</em> , <em>created_at</em>, and <em>updated_at</em> columns.</p>

<p><p>Now that we have a table set up all we have to go is create a model to go with it. Remember, the model is there to get data out of that table. Here is what the <em>Goose</em> model will look like .</p>

<p><figure class='code'><figcaption><span>Goose Model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Goose</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I know there&rsquo;s not much to that, but it&rsquo;s all you&rsquo;ll need to interact with the gooses table. There are 2 things to remember when creating this model.</p>

<ul>
<li>the file name must be singular and in snake_case</li>
<li>the class name must be singular and in CamelCase</li>
</ul>


<p>This model will give the entire application access to several getter and setter as well as other methods for objects created from the Goose class. And several methods that can be used on the Goose class. Some examples are:</p>

<ol>
<li> goose.name</li>
<li> goose.name =</li>
<li> Goose.first</li>
<li> Goose.find(2)</li>
<li> Goose.new(name: &lsquo;fred&rsquo;, height: &lsquo;10&rsquo;)</li>
</ol>


<p>In this post I talked a little about the MVC pattern in rails, the flow of Rails, creating tables with migrations, and models. In the next post I&rsquo;ll talk about model associations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting It All Together. Web Development With Ruby, HTTP, Ajax , MVC With Sinatra]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra/"/>
    <updated>2014-06-17T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra</id>
    <content type="html"><![CDATA[<p><img src="http://www.duskyswondersite.com/wp-content/uploads/2014/07/North-Queensferry-Fife-Scotland-by-David-Cation.jpg"></p>

<p>I just finished up <a href="http://www.gotealeaf.com">Tealeaf Academy</a> course 1 of 3 . It&rsquo;s has been an outstanding learning experience! I feel like I&rsquo;ve come really far as a programmer, and I can take on small projects in Ruby on my own. When I say small projects I mean a simple program that doesn&rsquo;t require a database (databases are in course 2), like a game. I&rsquo;ve done blackjack and tic-tac-toe, so I guess the next game could be something like checkers or hangman. If you have any ideas feel free to leave them in the comments. Maybe we could collaborate on a game or other small project. It might be a fun side project.</p>

<p>Anyway&hellip;.here&rsquo;s a recap of what I&rsquo;ve learned since my last post. Here is the <a href="http://infinite-waters-7065.herokuapp.com">Blackjack Game</a> I made while learning all of these things. <!--more--></p>

<h2>HTTP</h2>

<p>The heart of web development is HTTP. It&rsquo;s a stateless protocol for communicating between distributed systems.  In the case of web development it&rsquo;s usually a server and a client (browser). <a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">This article</a> goes into detail about HTTP.</p>

<h2>Sinatra</h2>

<p>Sinatra is a lightweight MCV framework for ruby. Below is a diagram of the MVC arcitecture.</p>

<p><img src="http://doug7410.github.io/images/sinatra.jpg"></p>

<p>In Sinatra , HTTP request are handled via routs. Routs are stored in controller, then depending on what the rout does, either a template is rendered or the request is redirected to another rout. You can read the Sinatra documentation <a href="http://www.sinatrarb.com/intro.html">here</a>.</p>

<h2>Helper methods in Sinatra</h2>

<p>Sinatra gives you the ability to create helper methods. These can be used in the controller and view templates. These are really handy for cleaning up your code and re-factoring.</p>

<h2>AJAX</h2>

<p>Ajax uses javascript to reload a section of a page without having to reload everything on the page. Below is an example of a simple ajax function with jQuery.</p>

<figure class='code'><figcaption><span>A simple AjAX call with jQuery</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">player_hits</span><span class="p">(){</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;form#hit_form input&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'><span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/game/player/hit&quot;</span>
</span><span class='line'><span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">){</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#game&quot;</span><span class="p">).</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Course one has been challenging and I spent a LOT of time on it. I built 3 versions of  the Blackjack game.</p>

<ol>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/blackjack.rb">command line - procedural</a></li>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/OO_blackjack.rb">command line - Object Oriented</a></li>
<li> <a href="http://infinite-waters-7065.herokuapp.com">web based procedural with Sinatra</a></li>
</ol>


<p>I feel like I&rsquo;ve come a long way, but I know it&rsquo;s just the beginning. My next post with be about Ruby on Rails!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Steps With Ruby and Web Development]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/12/first-steps-with-ruby-and-tealeaf-academy/"/>
    <updated>2014-06-12T14:14:11+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/12/first-steps-with-ruby-and-tealeaf-academy</id>
    <content type="html"><![CDATA[<p><img src="http://www.duskyswondersite.com/wp-content/uploads/2014/07/exqui-image-tree-and-hand.jpg"></p>

<blockquote><h4>All I want to do is be a professional web developer, make some money, love what I do, and live happily ever after.</h4></blockquote>

<p>Not to much to ask right? So where do I start? My journey actually began a while ago and I have some basic knowledge. I know HTML, CSS, some PHP and a little javascrpt. But that alone is not enough to get a job in today&rsquo;s market. Now adays, you need more that that. There are basically two types of web developers.</p>

<ol>
<li> Front End</li>
<li> Back End</li>
</ol>


<p>The differences are ilustrated very well in this <a href="http://www.youtube.com/watch?v=zXqs6X0lzKI">youtube video</a>.</p>

<!--more-->


<p>A <strong>front end</strong> developer deals with what you see in your web browser. The HTML, CSS and Javascript. They do things like design and build sites and user interface.</p>

<p>A <strong>back end</strong> developer deals with the server side scripting, databases, and behind the sceens magic that powers the web. Especially on sites where the user creates the content (like Facebook for example).</p>

<h3>I became interested in back end a long time ago when I learned you can create a site dynamically from a database.</h3>

<p>For example, if you have a site that sells video games, you can have a database with all the games and use it to dynamically create a page for every game in the database, while actually only having to write code for  a single page. Imagine if you have to code up a separate page for every game in your database. And then imagine you have 5000 games! Yikes!</p>

<p>So to me, there is a certain kind of magicall-ness to back end web development. I know it&rsquo;s not as cool as levitating a super model, but it&rsquo;s magical to me. So I know I want to do <strong>back end</strong>, but how do I learn that? At the time of this epiphany(around 2006), the answer to that was to learn <strong>PHP</strong>. I know that was a long time ago, so you must be thinking I&rsquo;m an expert PHP guy right? Sorry to say, that&rsquo;s not the case.</p>

<p>I used to make sites in Dreamweaver, and Dreamweaver has some built in tools to write PHP for you. So for a long while that&rsquo;s what I did. Which in the end, got me no where because I really didn&rsquo;t know what the heck I was doing. I didn&rsquo;t decide to actually try to learn how to use PHP the right way until about a year ago. I started by watching videos on Lynda.com . They were good, but I was on my own, since Lynda.com didn&rsquo;t really have any instructor feedback or assistance. I got stuck A LOT and kind of gave up on that. Then I discoverd an online school called O&#8217;Reilly School of Technology. They happed to have a cirtificate course called PHP/SQL Programming . PERFECT! Right? Well after about a year of doing this course ( with a few little breaks here and there) I didn&rsquo;t feel it&rsquo;s going to make me the <strong><em>modern rockstar developer</em></strong> I am striving to be. There are a few issues I have with them, but I wont go into that here.</p>

<p>Fast forward to a couple of months ago (5/2014). I&rsquo;ve come to the conclusion I need a school, with real teachers, and an active commuity of students , AND a cariculum designed to give me the skill set of a <strong>modern web developer</strong>. I found (through a lot of searching) **<a href="www.gotealeaf.com">Tealeaf Academy shcool for Ruby on Rails Developers</a>! They offer a four month/ three course program that takes you from zero to Ruby super hero. Now I&rsquo;m not saying I believe  I&rsquo;m going to finish the program and then get a job the next day. I know it will take a lot of work after the program is over. You don&rsquo;t get years of experience in four months obviously, but I do think it will give me the foundation to get those years of experience.  So this is where I&rsquo;m at. I&rsquo;ve been doing the course for the last month and I couldn&rsquo;t be happier.</p>

<p>Here is a list of what I&rsquo;ve learned so far.</p>

<h3>My time spent learning PHP was not wasted!</h3>

<p>Ruby and PHP are not that different in some ways. They are both programming languages. They use the same concepts. Ruby is just a lot more pleasent to write (in my opinion). My first days with Tealeaf were spent on the pre-course. It&rsquo;s meant to be an introducion to programming and ruby. Since I allready know the bascics of programming, this was pretty easy for me. Ruby has it&rsquo;s own syntax of course, but it&rsquo;s very easy to pick up and very easy to read.</p>

<p><strong>Here&rsquo;s a line of ruby code</strong></p>

<figure class='code'><figcaption><span>Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cards</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">card</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">card</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy right? Here&rsquo;s the same thing in PHP</p>

<figure class='code'><figcaption><span>PHP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">&lt;</span><span class="nb">count</span><span class="p">(</span><span class="nv">$cards</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$cards</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s doing the same thing, but the Ruby code is so much easier to read and write, not to mention faster.</p>

<h3>Command line</h3>

<p>I finally learned to use the command line! It&rsquo;s really not that hard. The commands I find myself using most are</p>

<ul>
<li>cd - change directory</li></li>
<li>ls - list files in the current directory</li></li>
<li>mkdir - make a directory</li></li>
<li>touch - create a file</li></li>
<li>git - use git to make commits and push to git hub</li></li>
</ul>


<h3>Git and Github</h3>

<p>If you want to be a modern web developer you HAVE to learn to use Git and Github. Github is used for storing your code and allows you to see all the versions you saved. It also allows teams to work on collaborate on a project and people to download your code to play with it. Very important and very big deal in the web development world.</p>

<h3>Time management for web developers</h3>

<p>I know this has nothing to do with Ruby, but it&rsquo;s worth mentioning. As it turns out there are two kinds of people in the business world. Makers and Managers,  and they need to manage their time differently to achieve maximum efficiency. Managers can do the 9-5 thing and cut up their day into nice little one or two hour chunks. Makers on the other hand need a nice long chunk of time to get something done. They don&rsquo;t do well with interruptions. The more they can focus on their craft, the happier they will be. I know this is true from personal experience. I love having a nice Saturday all to myself to work on a project. Here&rsquo;s an article all about this phenomenon <a href="http://www.paulgraham.com/makersschedule.html">http://www.paulgraham.com/makersschedule.html</a></p>

<h3>How to build an application from start to finish</h3>

<p>There is a certain workflow to efficiently writing a program . It&rsquo;s very difficult to just start witing code. You need to figure out the logic and then turn that logic into working code. Here is the magic formula.</p>

<ul>
<li>Come up with requirements/specifications, which will determine the scope.</li>
<li>Application logic; sequence of steps. Write the logic in psudo code</li>
<li>Translation of those steps into real code</li>
<li>Run code to verify logic.</li>
</ul>


<h3>Object Oriented Programming with Ruby (OOP)</h3>

<p>This is a subject that I&rsquo;ve been wanting to learn, and struggling with for a long time (in PHP), and I&rsquo;m happy to say I finally get it. Thanks to Tealeaf and Ruby. The idea is with OOP is you create classes for a program and create objects from the classes. Classes are like blueprints for a house,and objects are like the houses made from the blueprints. There are some important key words in Ruby with OOP.</p>

<ul>
<li>class - the blue print for objects</li>
<li>.new - keyword to create new objects</li>
<li>initialize - this is a special method that is run every time an object is created</li>
<li>attr_accessor - this creates getter and setter methods for instance variables</li>
<li>module - modules define behaviors that can be mixed into classes</li>
<li>include - the keyword for mixing modules into classes</li>
</ul>


<p>There&rsquo;s a lot more to it than that, but those are some of the basics in Ruby OOP Here is an example of a simple class and object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span><span class="p">{</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">intialize</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Fido&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>This is where I was at after 2 weeks of Tealeaf Academy</h3>

<p>I now have basic knowleghe of Ruby, OOP in Ruby, and I learned some valuable web developent skills such as command line and git. I completes a few projects as well.</p>

<ul>
<li><a href="https://github.com/doug7410/tealeaf_course_1/blob/master/blackjack.rb"><strong>Procedural Blackjack Game</strong></a></li>
<li><a href="https://github.com/doug7410/tealeaf_course_1/blob/master/tic_tac_toe.rb"><strong>Tic-Tac-Toe</strong></a></li>
<li><a href="https://github.com/doug7410/tealeaf_course_1/blob/master/OO_blackjack.rb"><strong>Object Oriented Blackjack Game</strong></a></li>
</ul>


<p>I&rsquo;m pretty happy with myself. This post is getting pretty long winded, so I&rsquo;ll cut it off here. Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Transaction With mySQL and PHP]]></title>
    <link href="http://doug7410.github.io/blog/2014/05/06/mysql-transactions-with-php/"/>
    <updated>2014-05-06T22:45:21+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/05/06/mysql-transactions-with-php</id>
    <content type="html"><![CDATA[<p><img src="http://doug7410.github.io/images/Code-Works.png"></p>

<p>I fellow student from <a href="http://www.oreillyschool.com">O&#8217;Reilly School Of Technology</a> asked me about using transactions in SQL to batch together multiple table updates. It turns out this is pretty easy. If you&rsquo;re reading this you probably know why this is a good idea, but I&rsquo;ll briefly explain why just in case you&rsquo;re not sure.</p>

<p>The most important thing when dealing with relational databases is to keep all the data, in all the tables consistent with your database rules. For example, if you have two tables where one depends on data from the other you wouldn&rsquo;t want to insert data into one if there was a problem with inserting data into the other. Below are two very simple tables.<!--more--></p>

<h3>widget_customers</h3>

<table class="table">
    
        <tr>
            <th>customerID</th>
            <th>first_name</th>
            <th>last_name</th>
        </tr>
        <tr>
            <td>1</td>
            <td>John</td>
            <td>Smith</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Walter</td>
            <td>White</td>
        </tr>
    
</table>


<h3>widget_orders</h3>

<table class="table">
    
        <tr>
            <th>orderID</th>
            <th>widgetID</th>
            <th>customerID</th>
        </tr>
        <tr>
            <td>1</td>
            <td>2</td>
            <td>2</td>
        </tr>
        <tr>
            <td>2</td>
            <td>1</td>
            <td>2</td>
        </tr>
    
</table>


<p>Lets assume we need to make a script that adds to both of these tables at the same time. Now let&rsquo;s assume something goes wrong while inserting data into the first one, but not the second one.  We could end up with something like what you see below:</p>

<h3>widget_customers</h3>

<table class="table">
    
        <tr>
            <th>customerID</th>
            <th>first_name</th>
            <th>last_name</th>
        </tr>
        <tr>
            <td>1</td>
            <td>John</td>
            <td>Smith</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Walter</td>
            <td>White</td>
        </tr>
    
</table>


<h3>widget_orders</h3>

<table class="table">
    
        <tr>
            <th>orderID</th>
            <th>widgetID</th>
            <th>customerID</th>
        </tr>
        <tr>
            <td>1</td>
            <td>2</td>
            <td>2</td>
        </tr>
        <tr>
        <td>2</td>
        <td>1</td>
        <td>2</td>
        </tr>
        <tr>
            <td>3</td>
            <td>1</td>
            <td></td>
        </tr>
    
</table>


<p>So here we attempted to inserted a new <strong>widget_customer</strong> and a new <strong>widget_order</strong>,but for some reason the customer insert query failed! That&rsquo;s why we have a new orderID (3) with a missing customerID. To make sure this never happens mySQL has transactions.</p>

<p>With transactions you can check that everything went right with both inserts before you <strong>COMMIT</strong> them to the database.</p>

<p>Before you can even use transaction, you need to set your database tables  to use a MySQL engine that supports <b>transactions</b>.</p>

<p>You can do this in your mysql command line like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; alter table widget_customers type=InnoDB;
</span><span class='line'>mysql&gt; alter table widget_orders type=InnoDB;</span></code></pre></td></tr></table></div></figure>


<p>Now you&rsquo;re ready to take advantage of transactions.</p>

<p>First you set a flag to true and begin the transaction. You use this to check that each SQL command is successful</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$success</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>  <span class="c1">//flag to determine success of transaction</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//start transaction</span>
</span><span class='line'><span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;SET AUTOCOMMIT=0&quot;</span><span class="p">;</span>     <span class="c1">// this turn off AUTOCOMMIT </span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span> <span class="c1">// in mySQL and lets you insert data without it being perminate </span>
</span><span class='line'><span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;BEGIN&quot;</span><span class="p">;</span> <span class="c1">// this begins the transaction</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you run your first query</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;INSERT into widget_customers (customerID, first_name, last_name) VALUES (&#39;&#39;,&#39;Jessie&#39;,&#39;James&#39;)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$result</span><span class="p">){</span>
</span><span class='line'>   <span class="nv">$success</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then your second query</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;INSERT into widget_orders (orderID, widgetID, customerID)</span>
</span><span class='line'><span class="s2">VALUES (&#39;&#39;, &#39;1&#39;, &#39;3&#39;)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$result</span><span class="p">){</span>
</span><span class='line'>   <span class="nv">$success</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if either of those queries didn&rsquo;t work, <code>$success</code> will be <strong>false</strong>.</p>

<p>In the last step we either commit our queries to the database or roll them back.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;COMMIT&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;A new customer and order has been entered!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;ROLLBACK&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Sorry, the update failed.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;SET AUTOCOMMIT=1&quot;</span><span class="p">;</span>  <span class="c1">//return to autocommit</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what&rsquo;s happening here?</p>

<p>First we check our <code>$success flag</code>. If <code>$success</code> is <strong>true</strong> we run the mySQL command <code>COMMIT</code>. At this point all the data we inserted will be perminate. In other words, you wount be able to undo the changes. (you can delete the data you don&rsquo;t want, but that&rsquo;s not the point) .</p>

<p>If any of our queries failed <code>$success</code> will equal <strong>false</strong>. We&rsquo;ll then run the <code>ROLLBACK</code> command and all the tables will go back to how they were before the transaction started.</p>

<p>The last command <code>SET AUTOCOMMIT=1</code> just sets the database back to how it was before the transaction started (with transactions disabled).</p>

<p>So I hope all of that made sense, please let me know if you have any questions or comments. Thanks!</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Doug's Web Development Blog]]></title>
  <link href="http://doug7410.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://doug7410.github.io/"/>
  <updated>2014-08-31T17:37:01+00:00</updated>
  <id>http://doug7410.github.io/</id>
  <author>
    <name><![CDATA[Doug Steinberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I Added Images to My Postit App With AJAX and MetaInspector]]></title>
    <link href="http://doug7410.github.io/blog/2014/08/04/add-image-to-post-with-ajax-and-metainspector/"/>
    <updated>2014-08-04T15:07:35+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/08/04/add-image-to-post-with-ajax-and-metainspector</id>
    <content type="html"><![CDATA[<p>In <a href="gotealeaf.com">Tealeaf Academy&rsquo;s</a> second course <a href="http://www.gotealeaf.com/curriculum#!rails">Rapid Prototyping with Ruby on Rails</a> we built an app called Postit. It&rsquo;s bassically a clone of the popular site Reddit.com. Of of the featues of this app is to add a URL to the site you are posting about. I decided to add a feature for grabbing an image on that URL. To do this I used some AJAX and a web scraping gem. Here is what the page looks like in action.</p>

<p><img src="/images/image_scrapper.jpg"></p>

<p>Here is the link to the actual working app <a href="http://shielded-retreat-9536.herokuapp.com/">http://shielded-retreat-9536.herokuapp.com/</a> <!--more--></p>

<p>Here is the code on GitHub <a href="https://github.com/doug7410/postit-app">https://github.com/doug7410/postit-app</a></p>

<p>You&rsquo;ll have to register and create a post in order to try out the image feature.</p>

<h2>Here the rundown on how I did it.</h2>

<h3>1. First add a column to the database for the image</h3>

<p>The first thing I had to do was add a <code>post_image</code> column to the <code>posts</code> table. I went into the console and created a migration.</p>

<pre><code>$ rails generate migration add_post_image_to_posts
</code></pre>

<p>This created the migration file. Below is the file with the code to add the new column.</p>

<pre><code class="ruby 20140711160221_add_post_image_to_posts.rb">class AddPostImageToPosts &lt; ActiveRecord::Migration
  def change
    add_column :posts, :post_image, :string
  end
end
</code></pre>

<h3>2. the basic workflow for getting the images from a URL</h3>

<p>In this application a post has 5 attributes (not including timestamps). They are:</p>

<ul>
<li>title</li>
<li>url</li>
<li>description</li>
<li>slug</li>
<li>post_image</li>
<li>user_id</li>
</ul>


<p>I&rsquo;m using a web scraper called <a href="https://github.com/jaimeiniesta/metainspector">metainspector</a> to fetch an array of images from the <code>url</code> given to the post. To access the images returned by metainspector I have to take following steps:</p>

<ol>
<li>create a link that sends an HTTP request to a <code>post_image</code> action in the post controller</li>
<li>that action renders a javascript template</li>
<li>that template uses a method which is accessed on the post objecy</li>
<li>inside that method, <strong>metainspector</strong> uses the <code>url</code> to return an array of images that are on the url&rsquo;s web page</li>
<li>a list of images is shown and the user chooses an image for the post</li>
</ol>


<p>That&rsquo;s the basic outline of the workflow for getting the images. Here is how I did it.</p>

<h3>3. The workflow in the UI</h3>

<p>I&rsquo;m using AJAX and a very slick JavaScript interface in the UI to select the image. The workflow in the UI works like this:</p>

<ol>
<li> when creating or editing a post, the user enters a url in the URL form field</li>
<li> the user clicks on the &ldquo;Choose Post Image&rdquo; button</li>
<li> underneath the URL field, a hidden div slides down with all the images generated from the URL</li>
<li> the user clicks on an image to choose it and assign it to the post</li>
</ol>


<p>Rails has a very easy way to AJAXify a link by adding <code>remote: true</code> to a <code>link_to</code> helper method. Here is the section of the form with the URL field and the link:</p>

<p>&#8220;`erb</p>

<div class="control-group">
  <%= f.label :url %>
  <%= f.text_field :url %>
  <%= link_to 'Choose Post Image', post_image_path, remote: true, 
  method: 'post', class: 'btn btn-primary', id: 'choose_img_btn' %>
</div>


<pre><code>
There are two things about this link use some special rails magic

- `remote" true` 
- `method: 'post'`

`remote: true` turns this into an AJAX link. It's equivalent to writing a JavaScript event handler that process an AJAX call when the link is clicked. 

`method: 'post'` turns the link in to a POST request as opposed to a GET request. 

Both of these are necessary for the next step, the controller action. 

When the user adds a URL to the field and then clicks the "Choose Post Image" button it uses this rout:
</code></pre>

<p>post &lsquo;/post_image&rsquo;, to: &lsquo;posts#post_image&rsquo;
&#8220;`</p>

<p>The link goes to the <code>post_image_path</code> , so a click on this link sends a POST request to the <code>post</code> controller&rsquo;s <code>post_image</code>  action , and because the link has the <code>remote: true</code> parameter, the format is JavaScript.</p>

<h3>4. what&rsquo;s happening in the <code>post_image</code> action in the <code>post</code> controller</h3>

<p>Here is the action in the controller:</p>

<pre><code class="ruby">def post_image
  @post = Post.new

  respond_to do |format|
    format.js do
      @url = params[:url]
    end
  end
end
</code></pre>

<p>Here there are 3 things happening.</p>

<ul>
<li>a new @post object is created. This is necessary because the post model has a method that fetches the images. So you need a post object to call that method</li>
<li>a @url variable is created from the URL field in the form. If you look at the &ldquo;Choose Post Image&rdquo; link you probably notice there is no URL parameter anywhere. I used JavaScript to dynamically add the url as a parameter to the link.</li>
<li>lastly, the action renders the default template <code>post_image.js.erb</code> . Since the request coming into the action is JavaScript formatted, the <code>respond_to</code> block sends the request off to the <code>post_image.js.erb</code> template.</li>
</ul>


<p><strong>I should probably take a step back and show you the JavaScript that added the URL parameter to the link.</strong></p>

<pre><code class="Javascript /app/assets/javascripts/post_images.js">// this makes the "choose image button add the url parameter to the end of the link"

$(document).ready(function(){

  var link = $("#choose_img_btn").attr("href");
  var url = $("#post_url").val();

  $("#choose_img_btn").attr("href", link + "?url=" + url );

  $("#post_url").change( function(){
    url = $("#post_url").val();
    var new_link = (link + "?url=" + url);
    $("#choose_img_btn").attr("href", new_link );
  })
});
</code></pre>

<p><strong>NOTE:</strong> <em>to get the code above to work properly I had to add the jquery-turbolinks gem to my gemfile</em></p>

<p><code>gem 'jquery-turbolinks'</code></p>

<p>Basically what this does is append <code>?url=</code>  and whatever text is in the URL feild to the end of the link.</p>

<p>The link by default points to the <code>/post_image</code> path. So if you type <code>www.cnn.com</code> into the URL field, the link will automatically be turned into <code>/post_image?www.cnn.com</code></p>

<h3>5. inside the JavaScript template  <code>post_image.js.erb</code></h3>

<p>After the response goes through the controller action it ends up in the JavaScript template. This is where all of the cool AJAX stuff happens. Here is what the template looks like.</p>

<pre><code class="Javascript /app/views/posts/post_image.js.erb">var images_html = '&lt;ul class="choose_img_thumbs"&gt;';

&lt;% if @post.url_images(@url) != "error"  %&gt;
  &lt;% @post.url_images(@url).each do |image| %
    images_html += '&lt;li&gt;';
    images_html += '&lt;%= image_tag image , id: "url_image" %&gt;';
    images_html += '&lt;/li&gt;';
  &lt;% end %&gt;
  images_html += '&lt;/ul&gt;'
&lt;% else %&gt;
  images_html += 'You did not enter a valid URL. Please try again.'
&lt;% end %&gt;

$("#images_container").html(images_html);

$("#image_choices").slideDown(function(){

  $("#image_choices img").each( function(){
    $(this).click( function(){
      $("#post_post_image").val($(this).attr('src'));
      $("#image_choices").slideUp();
      $("#post_image").slideDown().html('&lt;img src="' + $(this).attr('src') + '" /&gt;');
    });
  });
});
</code></pre>

<p><strong>To give you an idea of my though process I&rsquo;ll try to explain what this file does.</strong></p>

<ul>
<li>It creates an unordered list of images and then places them into a div with the ID of <code>#images_container</code> .</li>
<li>Once the image list is inside the <code>#images_container</code> , that div slides down. Keep in mind this is all happening on the create post or edit post page.</li>
<li>After the <code>#images_container</code> slides down, the user clicks on an image to choose it and assign it to the post.</li>
<li>once the chosen image has been clicked the <code>images_container</code> slides up and another hidden div, <code>#post_image</code> gets the chosen image inserted into it and slides down.</li>
<li>there is also a hidden form field <code>#post_post_images</code>. The image URL is dynamically added to it&rsquo;s value attriubte.</li>
</ul>


<p>The important part of this code is <code>@post.url_images(@url)</code> . Here is the <code>url_images</code> method in the Post model</p>

<pre><code class="ruby /app/models/post.rb">def url_images(url)
  ext = url.split('.').last
  if ['jpg','jpeg','png','gif','bmp'].include?(ext)
    [url]
  else
   begin
     page = MetaInspector.new(url) 
     page.images
   rescue
     "error"
   end
  end
end
</code></pre>

<p>There are basically 3 cases that can happen in this method</p>

<ul>
<li>the URL passed in is an image URL</li>
<li>the URL is a web page with images on it</li>
<li>or there is a problem with the URL, in which case the string &ldquo;error&rdquo; is returned.</li>
</ul>


<p>The first thing that happens is the URL is split apart on the dots (.) . If it&rsquo;s  an image URL like <code>www.mysite.com/myimage.jpg</code> the first condition in the if statement will execute and an array with the URL string will be returned.</p>

<p>If that&rsquo;s not the case the URL will be passed into MetaInspector and assigned to the <code>page</code> variable. MetaInspector scrapes information from a given URL and gives you several methods for accessing that data. In this case I just want the images. <code>page.images</code> returns an array of all the images retrieved by MetaInspector</p>

<p>If MetaInspector has a problem with the URL passed in it will throw an exception and the whole app will fail. To get around this I used a <code>begin and rescue block</code>. This way if there are any exception thrown by MetaInspector the method will execute the rescue block and just return the string &ldquo;error&rdquo;.</p>

<p>So that&rsquo;s the first thing going on the JavaScript template. The first line is</p>

<pre><code class="Javascript">&lt;% if @post.url_images(@url) != "error"  %&gt;
</code></pre>

<p>so as long as there is no error, this section will execute.</p>

<pre><code class="Javascript">&lt;% @post.url_images(@url).each do |image| %
  images_html += '&lt;li&gt;';
  images_html += '&lt;%= image_tag image , id: "url_image" %&gt;';
  images_html += '&lt;/li&gt;';
&lt;% end %&gt;
images_html += '&lt;/ul&gt;'
</code></pre>

<p>This creates tan unordered list of images and assigns the list to the <code>images_html</code> variable.</p>

<p>That list is put into the <code>#images_container</code> with this code</p>

<pre><code class="Javascript">$("#images_container").html(images_html);
</code></pre>

<p>Then this part
<code>Javascript
$("#image_choices").slideDown(function(){
</code>
slides down the <code>#image_choices</code> and when an image is clicked 3 things happen</p>

<ul>
<li>this line <code>$("#post_post_image").val($(this).attr('src'));</code> adds the URL of the clicked image to a hidden form input  <code>"#post_post_image"</code></li>
<li>the <code>#image_choices</code> div slides up</li>
<li>the image is added to the <code>#post_image</code> div and it slides down</li>
</ul>


<pre><code class="Javascript">$("#image_choices").slideDown(function(){

  $("#image_choices img").each( function(){
    $(this).click( function(){
      $("#post_post_image").val($(this).attr('src'));
      $("#image_choices").slideUp();
      $("#post_image").slideDown().html('&lt;img src="' + $(this).attr('src') + '" /&gt;');
    });
  });
});
</code></pre>

<h3>6. finishing up the feature&rsquo;s workflow</h3>

<p>At this pont all that is left is the post has to be saved and the image URL will be added to the <code>post_image</code> column. This is because of the hidden form field I talked about. Here is the hidden field in the form.</p>

<pre><code class="ruby">&lt;%=  f.hidden_field :post_image %&gt;
</code></pre>

<p>Also, just for clarification. Here is the entire post form.</p>

<p>&#8220;`erb /app/views/posts/_form.html.erb</p>

<div class="well">

<%= render 'shared/errors', object: @post %>
<%= my_form_for @post do |f| %>
  <%=  f.hidden_field :post_image %>
<div class="control-group">
  <%= f.label :title %>
  <%= f.text_field :title %>
</div>
<div class="control-group">
  <%= f.label :url %>
  <%= f.text_field :url %>
  <%= link_to 'Choose Post Image', post_image_path, remote: true, method: 'post', class: 'btn btn-primary', id: 'choose_img_btn' %>
</div>
<div id="image_choices" >
  <h4>Choose an image to go with this post.</h4>
  <div id="images_container"></div>
</div>
<div id="post_image">
  <%= image_tag @post.post_image  %>
</div
> <div class="control-group"> 
  <%= f.label :description  %>
  <%= f.text_area :description, rows: 5 %>
</div>
<div class="control-group">
  <h5>Categories:</h5>
  <%= f.collection_check_boxes :category_ids, Category.all, :id, :name do |cb| %>
    <%= cb.label(class: 'checkbox inline') { cb.check_box(class: 'checkbox') + cb.text } %>
  <% end %>  
</div>
  <%= f.submit(@post.new_record? ? 'Create Post' : 'Update Post', class: 'btn btn-primary') %>
<% end %>
</div>


<p>&#8220;`</p>

<p>I hope that made some sense and now you have some idea of how I did it. It took a combination of JavaScript, jQuery, AJAX, a scraper gem, and standard rails MVC. I&rsquo;m sure there are things that can be improved on and tweaked so please feel free to leave feedback.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Project - Punch Clock App]]></title>
    <link href="http://doug7410.github.io/blog/2014/07/16/rails-project-punch-clock-app/"/>
    <updated>2014-07-16T22:45:21+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/07/16/rails-project-punch-clock-app</id>
    <content type="html"><![CDATA[<p><img src="/images/punch-clock.jpg"></p>

<p>So I&rsquo;m done with week 2 of the Tealeaf Ruby on Rails course and I&rsquo;ve learned to do basic CRUD ( create, read, update, delete) actions using Rail&rsquo;s resourses , models, form helpers, and views.</p>

<p>I thought this would be a good time start on a side project I had saved in my back pocket. This would be a good chance to practice what I&rsquo;ve learned as well as start my own project. The idea is pretty simple, it&rsquo;s called &ldquo;Punch Clock&rdquo;, for now at least. It allows you to create different jobs or tasks, and then track the time you spent working on them. Here  the Github repository <!--more--></p>

<p><a href="https://github.com/doug7410/punch-clock">https://github.com/doug7410/punch-clock</a></p>

<h4>The image above is what it looks like so far.</h4>

<p>You can also click on the Job Title&rsquo;s  to see that job&rsquo;s detail&rsquo;s page There you will see a list of all the punches you&rsquo;ve made. Each punch out has the &ldquo;time on the clock&rdquo; next to it. So if you punch in at 8:00AM and punch out at 10:35AM, that punch will show your time like this &ldquo;0002:35:00&rdquo; . You just worked for 2 hours and 35 minutes! Go take a coffee break!</p>

<p>The page will also show the total time worked on that job. Here&rsquo;s a screenshot of the <strong> job detail page </strong>.</p>

<p><img src="/images/punch-clock2.jpg"></p>

<p><strong> So far my list of features for this app are: </strong></p>

<ul>
<li>You can create jobs</li>
<li>each job has a title and  description</li>
<li>each job has punches</li>
<li>each punch &ldquo;out&rdquo; uses the previous punch &ldquo;in&rdquo; to calculate the time on the clock</li>
<li>each job has a running total of all the time worked</li>
</ul>


<p>That&rsquo;s it for now. Here is a list of what I want to add on</p>

<ul>
<li>add user authentication</li>
<li>use javascript to have running clocks</li>
<li>add notes to each punch so you can keep track of what was done during that time period</li>
<li>have the ability to edit or delete punched</li>
<li>be able to manually add punches</li>
<li>ability to edit jobs and user profiles</li>
<li>add hourly rate to jobs to keep track of earnings</li>
<li>add reports to break down time worked by day, month, date-range, etc..</li>
</ul>


<p>That&rsquo;s all I have for now, but there are lots of possibilities with this.  I also want to have a nice graphic design, but that&rsquo;s not as important as the MVP right now.</p>

<p>If you have any suggestions or questions please leave in the comments. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf - Rapid Prototyping With Ruby on Rails Cousre Done!]]></title>
    <link href="http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done/"/>
    <updated>2014-07-16T16:10:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done</id>
    <content type="html"><![CDATA[<p><img src="/images/postit.jpg"></p>

<p>It&rsquo;s been a few weeks since I last posted about my journey to becoming a Ruby on Rails developer through <a href="http://gotealeaf.com">Tealeaf Academy</a> . At this point I&rsquo;m done with their second course &ldquo;Rapid Prototyping with Ruby on Rails&rdquo; . This blog post is actually my final assignment for the course. I have learned to build a basic rails app from start to finish and I&rsquo;ve even been able to apply some custom features that weren&rsquo;t discussed in the course. <!--more--></p>

<p>Here is the final project <a href="http://shielded-retreat-9536.herokuapp.com">http://shielded-retreat-9536.herokuapp.com</a>
Here is my code on GitHub - <a href="https://github.com/doug7410/postit-app">https://github.com/doug7410/postit-app</a></p>

<h4>I&rsquo;ve learned way to much to go into detail about everything so here is a summery of all the things I learned while building this rails application.</h4></h4>

<ul>
<li>Model View Controller</li>
<li>Rails Migrations</li>
<li>Active Record</li>
<li>Active Record Associations

<ul>
<li>1 to Many Associations</li>
<li>Many to Many associations</li>
<li>Polymorphic associations</li>
</ul>
</li>
<li>RESTful routes</li>
<li>Custom Routes</li>
<li>ERB templates</li>
<li>User Authentication with &ldquo;has_secure_password&rdquo;</li>
<li>Helper Methods</li>
<li>Modules</li>
<li>Creating a Gem</li>
<li>Rails flavored AJAX</li>
</ul>


<p>I&rsquo;m probably leaving some things out, so I might have to go back and edit that list. In my <a href="http://dsp-websolutions.com/portfolio/2014/06/25/journey-to-ror-developer-part-3">last post</a> I talked about MVC and Rails Migrations. Now I&rsquo;ll talk a little about <strong>Active Record</strong> and <strong>Associations</strong> .</p>

<h3>What is Active Record?</h3>

<p>Active record is an ORM (Object Relational Mapping system).  Active Record allows Rails to interact with a database and and also stores information about the relationships between tables in the database. All with out ever writing SQL.This is really incredible if you ever had to write SQL to interact with a database! Active Record completely eliminates that whole layer of thinking.</p>

<p>Here&rsquo;s a simple example of the power and convenience of Active Record. Here is a simple table and it&rsquo;s model.</p>

<p><strong>dogs table</strong>(tables are always named in plural form)</p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
  </tr>
</table>


<p><strong>Dog model</strong> dog.rb (model names are always singular)</p>

<pre><code class="ruby">class Dog &lt; ActiveRecord::Base
end
</code></pre>

<p>Notice the Dog class is completely empty aside from the fact that it inherits from ActiveRecord::Base. The Dog class now has access to all the Active Record methods. If we wanted to select a row form the dogs table you can do so like this in rails console.</p>

<pre><code>irb&gt; dog = Dog.first
=&gt; &lt;Dog id: 1, name: "Rocky", weight: "15", age: "5"&gt;
</code></pre>

<p>This would return the first record in the &lsquo;dogs&rsquo; table. Active record has many other methods for returning rows form a table. Let&rsquo;s say we wan&rsquo;t the dog with an ID of 2</p>

<pre><code>irb&gt; dog = Dog.find(2)
=&gt; &lt;Dog id: 2, name: "Gump", weight: "45", age: "11"&gt;
</code></pre>

<p> Active Record also creates getter and setter methods for every column in the database table. So you can do things like this.</p>

<pre><code>irb&gt; dog.name
=&gt; "Gump"
irb&gt; dog.age
=&gt; "11"
irb&gt; dog.age = 12
=&gt; 12
irb&gt; dog
=&gt; [id: 2, name: "Gump", weight: "45", age: "12"]
</code></pre>

<p>Active record makes working with data a breeze. If we had to write SQL just to do the few examples I have above it would take way more code and would be way less pretty.</p>

<h3>The other great thing about Active Record is Associations</h3>

<p>Associations are used to create relationships between tables. There are 2 ways tables can be related</p>

<ul>
<li>1 to Many</li>
<li>Many to Many</li>
</ul>


<h4>Here is another table that can relate to the dogs table:</h4>

<p><strong>owners</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Frank</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Rachel</td>
  </tr>
</table>


<p>In this example we&rsquo;re going to say a dog has one owner, and an owner can have many dogs. This a a typical one to many relationship. The Dog and Owner models will look like this.</p>

<p><strong>Dog model</strong></p>

<pre><code class="ruby">class Dog &lt; ActiveRecord::Base
  belongs_to :owner
end
</code></pre>

<p><strong>Owner model</strong></p>

<pre><code class="ruby">class Owner &lt; ActiveRecord::Base
  has_many :dogs
end
</code></pre>

<p>Doing this will require one column to be added to the dogs table. A foreign key of <code>owner_id</code></p>

<p><strong>dogs table</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
    <th>owner_id</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
    <td>1</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
    <td>1</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
    <td>2</td>
  </tr>
</table>


<p>Rails will automatically know to use <code>owner_id</code> because we stated in the Dog model that a dog <code>belongs_to :owner</code> . The foreign key column always goes in the table on the <code>belongs_to</code> side of a relation.</p>

<p>Now we can do things like this.</p>

<pre><code>irb&gt; dog = Dog.find(2)
=&gt; &lt;Dog id: 2, name: "Gump", weight: "45", age: "12"&gt;
irb&gt; dog.owner.name
=&gt; "Frank"
irb&gt; owner = Owner.last
=&gt; &lt;Owner id: 2, name: "Rachel"&gt;
irb&gt; owner.dogs.first.name
=&gt; "Jenny"
</code></pre>

<p>So that&rsquo;s a little taste of what active record can do and how classes can be associated.</p>

<p>Here is a great reference for all Active Record - <a href="http://guides.rubyonrails.org/active_record_basics.html">http://guides.rubyonrails.org/active_record_basics.html</a></p>

<p>Rails uses a lot of conventions to make all of this magic work, but if you can remember them you can be very productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Say Hello to Rails and All of It's Magic!]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic/"/>
    <updated>2014-06-25T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic</id>
    <content type="html"><![CDATA[<p><img src="/images/roads-22.jpg"></p>

<p>I&rsquo;m through the first week of course 2 with Tealeaf Academy (Rapid prototyping with Ruby on Rails) It&rsquo;s been very demanding to say the least, but still very fun and engaging.  There was a lot of information to absorb and I learned a lot.</p>

<p>Before week 1 officially started, I was asked to read this <a href="http://guides.rubyonrails.org/getting_started.html">Getting Started with Rails guide</a>. I did actually get through it and build the example project, but by the end I wasn&rsquo;t very confident about Rails, which is ok, because that&rsquo;s what the course is for.</p>

<!--more-->


<p>The first lecture in the course cleared a lot of things up for me. Ruby on Rails (or RoR) is basically split up into 5 main parts and follows a MVC  (Model View Controller) pattern:</p>

<h3>The five parts are:</h3>

<ol>
<li> The Router</li>
<li> The Controller</li>
<li> The Model</li>
<li> The Database</li>
<li> The View</li>
</ol>


<h2>Here is my quick explanation of  how rails works:</h2>

<ol>
<li> A HTTP request comes into the <strong>Router</strong></li>
<li> the router directs that request to the <strong>Controller</strong></li>
<li> depending on what is in the request, the <strong>Controller</strong> will do 1 of 3 things

<ul>
<li>redirect to the router <strong>Router</strong></li>
<li>render a <strong>View</strong> template</li>
<li>or reach into the <strong>Model</strong>. The <strong>Model</strong> can then retrieve data from the <strong>Database</strong> , send that back to the  <strong>Controller</strong>, and then render a <strong>View</strong></li>
</ul>
</li>
</ol>


<h4>Here is a nice diagram of rails:</h4>

<p><img src="/images/request_response_mvc.jpg"></p>

<h3>This part of the course focused mostly on the Model layer</h3>

<p>Here is what a simple model looks like in Rails</p>

<pre><code class="ruby ">class Post &lt; ActiveRecord::Base
end
</code></pre>

<p>Every model in Rails corresponds to a table in the database. The above model would belong to a table named &lsquo;posts&rsquo;. Rails has several conventions for naming models, classes, tables, and lots of other things. This is what allows the &ldquo;Rails Magic&rdquo; to happen. For a model three naming conventions must be followed.</p>

<ol>
<li> the name of the model file must be singular, lowercase, and snake case. So the Post model would be in a file called &lsquo;post.rb&rsquo;. A &lsquo;PostCategory&rsquo; model would be in &lsquo;post_category.rb&rsquo;</li>
<li> the name of the model class should be singular and CamelCase. ex: &lsquo;Post&rsquo;, or &lsquo;PostCategory&rsquo;</li>
<li> the name of the table must be  plaural form, and snake case. ex: &lsquo;posts, or &#8216;post_categories&rsquo;</li>
</ol>


<p>Figuring out the name Rails expects can sometimes be tricky, so there is a built in method you can use in rails console to figure those tricky ones out. Check out the code below in rails console.</p>

<pre><code>&gt; "Goose".tableize
=&gt; "gooses"
</code></pre>

<p>The model name here is Goose. Calling the <code>tableize</code> method on the string &ldquo;Goose&rdquo; tells you rails expects the table to be called &lsquo;gooses&rsquo;. The model file for this would be goose.rb .</p>

<p>To create tables in Rails there is a great built in feature called <strong><em>migrations</em></strong>. To create a migration you first run this command in termianl in your project directory</p>

<pre><code>$ rails generate migration create_gooses
</code></pre>

<p>In this example gooses is the table name. If you wanted to make a posts table you would just replace gooses with posts.  This will create a file in the <code>db/migrate</code> directory that looks like this:</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
    end
  end
end
</code></pre>

<p>Now lets give gooses a name, height, and timestamps columns.</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
      t.string :name
      t.integer :height
      t.timestamps
    end
  end  
end
</code></pre>

<ol>
<li> t.string :name (creates a column called name with a type of string)</li>
<li> t.integer :height (creates a column called height with a type of integer)</li>
<li> t.timestamps creates two column (created_at and updated_at) Rails automatially fills these in when records are created or updated. Pretty neat right!</li>
</ol>


<p>After you finish creating your migration file you run this command in your terminal</p>

<pre><code>$ rake db:migrate
</code></pre>

<p>If you have bundler installed you might need to run</p>

<pre><code>$ bundle exec rake db:migrate
</code></pre>

<p>This will create the table in your database, and you never have to write a single line of SQL, now that&rsquo;s awesome!</p>

<h4>gooses table</h4>

<table class="table">
  <tr>
    <th>id</th>
    <th>name</th>  
    <th>height</th>
    <th>created_at</th>
    <th>updated_at</th>
  </tr>  
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
</table>


<p>As you can see above, the rails automaically added <em>id</em> , <em>created_at</em>, and <em>updated_at</em> columns.</p>

<p><p>Now that we have a table set up all we have to go is create a model to go with it. Remember, the model is there to get data out of that table. Here is what the <em>Goose</em> model will look like .</p>

<pre><code class="ruby Goose Model">class Goose &lt; ActiveRecord::Base
end
</code></pre>

<p>I know there&rsquo;s not much to that, but it&rsquo;s all you&rsquo;ll need to interact with the gooses table. There are 2 things to remember when creating this model.</p>

<ul>
<li>the file name must be singular and in snake_case</li>
<li>the class name must be singular and in CamelCase</li>
</ul>


<p>This model will give the entire application access to several getter and setter as well as other methods for objects created from the Goose class. And several methods that can be used on the Goose class. Some examples are:</p>

<ol>
<li> goose.name</li>
<li> goose.name =</li>
<li> Goose.first</li>
<li> Goose.find(2)</li>
<li> Goose.new(name: &lsquo;fred&rsquo;, height: &lsquo;10&rsquo;)</li>
</ol>


<p>In this post I talked a little about the MVC pattern in rails, the flow of Rails, creating tables with migrations, and models. In the next post I&rsquo;ll talk about model associations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting It All Together. Web Development With Ruby, HTTP, Ajax , MVC With Sinatra]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra/"/>
    <updated>2014-06-17T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://www.duskyswondersite.com/wp-content/uploads/2014/07/North-Queensferry-Fife-Scotland-by-David-Cation.jpg">http://www.duskyswondersite.com/wp-content/uploads/2014/07/North-Queensferry-Fife-Scotland-by-David-Cation.jpg</a>&#8221;></p>

<p>I just finished up <a href="http://www.gotealeaf.com">Tealeaf Academy</a> course 1 of 3 . It&rsquo;s has been an outstanding learning experience! I feel like I&rsquo;ve come really far as a programmer, and I can take on small projects in Ruby on my own. When I say small projects I mean a simple program that doesn&rsquo;t require a database (databases are in course 2), like a game. I&rsquo;ve done blackjack and tic-tac-toe, so I guess the next game could be something like checkers or hangman. If you have any ideas feel free to leave them in the comments. Maybe we could collaborate on a game or other small project. It might be a fun side project.</p>

<p>Anyway&hellip;.here&rsquo;s a recap of what I&rsquo;ve learned since my last post. Here is the <a href="http://infinite-waters-7065.herokuapp.com">Blackjack Game</a> I made while learning all of these things. <!--more--></p>

<h2>HTTP</h2>

<p>The heart of web development is HTTP. It&rsquo;s a stateless protocol for communicating between distributed systems.  In the case of web development it&rsquo;s usually a server and a client (browser). <a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">This article</a> goes into detail about HTTP.</p>

<h2>Sinatra</h2>

<p>Sinatra is a lightweight MCV framework for ruby. Below is a diagram of the MVC arcitecture.</p>

<p><img src="/images/sinatra.jpg"></p>

<p>In Sinatra , HTTP request are handled via routs. Routs are stored in controller, then depending on what the rout does, either a template is rendered or the request is redirected to another rout. You can read the Sinatra documentation <a href="http://www.sinatrarb.com/intro.html">here</a>.</p>

<h2>Helper methods in Sinatra</h2>

<p>Sinatra gives you the ability to create helper methods. These can be used in the controller and view templates. These are really handy for cleaning up your code and re-factoring.</p>

<h2>AJAX</h2>

<p>Ajax uses javascript to reload a section of a page without having to reload everything on the page. Below is an example of a simple ajax function with jQuery.</p>

<pre><code class="javascript A simple AjAX call with jQuery">function player_hits(){
$(document).on("click", "form#hit_form input", function(){ 

$.ajax({
type: "POST",
url: "/game/player/hit"
}).done(function(msg){
$("#game").replaceWith(msg);
});
return false;
});
}
</code></pre>

<p>Course one has been challenging and I spent a LOT of time on it. I built 3 versions of  the Blackjack game.</p>

<ol>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/blackjack.rb">command line - procedural</a></li>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/OO_blackjack.rb">command line - Object Oriented</a></li>
<li> <a href="http://infinite-waters-7065.herokuapp.com">web based procedural with Sinatra</a></li>
</ol>


<p>I feel like I&rsquo;ve come a long way, but I know it&rsquo;s just the beginning. My next post with be about Ruby on Rails!</p>
]]></content>
  </entry>
  
</feed>

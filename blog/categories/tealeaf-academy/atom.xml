<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tealeaf Academy | Doug S.]]></title>
  <link href="http://doug7410.github.io/blog/categories/tealeaf-academy/atom.xml" rel="self"/>
  <link href="http://doug7410.github.io/"/>
  <updated>2014-08-04T13:55:26+00:00</updated>
  <id>http://doug7410.github.io/</id>
  <author>
    <name><![CDATA[Doug Steinberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tealeaf - Rapid Prototyping With Ruby on Rails Cousre Done!]]></title>
    <link href="http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done/"/>
    <updated>2014-07-16T16:10:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done</id>
    <content type="html"><![CDATA[<p><img src="/images/postit.jpg"></p>

<p>It&rsquo;s been a few weeks since I last posted about my journey to becoming a Ruby on Rails developer through <a href="http://gotealeaf.com">Tealeaf Academy</a> . At this point I&rsquo;m done with their second course &ldquo;Rapid Prototyping with Ruby on Rails&rdquo; . This blog post is actually my final assignment for the course. I have learned to build a basic rails app from start to finish and I&rsquo;ve even been able to apply some custom features that weren&rsquo;t discussed in the course. <!--more--></p>

<p>Here is the final project <a href="http://shielded-retreat-9536.herokuapp.com">http://shielded-retreat-9536.herokuapp.com</a>
Here is my code on GitHub - <a href="https://github.com/doug7410/postit-app">https://github.com/doug7410/postit-app</a></p>

<h4>I&rsquo;ve learned way to much to go into detail about everything so here is a summery of all the things I learned while building this rails application.</h4></h4>

<ul>
<li>Model View Controller</li>
<li>Rails Migrations</li>
<li>Active Record</li>
<li>Active Record Associations

<ul>
<li>1 to Many Associations</li>
<li>Many to Many associations</li>
<li>Polymorphic associations</li>
</ul>
</li>
<li>RESTful routes</li>
<li>Custom Routes</li>
<li>ERB templates</li>
<li>User Authentication with &ldquo;has_secure_password&rdquo;</li>
<li>Helper Methods</li>
<li>Modules</li>
<li>Creating a Gem</li>
<li>Rails flavored AJAX</li>
</ul>


<p>I&rsquo;m probably leaving some things out, so I might have to go back and edit that list. In my <a href="http://dsp-websolutions.com/portfolio/2014/06/25/journey-to-ror-developer-part-3">last post</a> I talked about MVC and Rails Migrations. Now I&rsquo;ll talk a little about <strong>Active Record</strong> and <strong>Associations</strong> .</p>

<h3>What is Active Record?</h3>

<p>Active record is an ORM (Object Relational Mapping system).  Active Record allows Rails to interact with a database and and also stores information about the relationships between tables in the database. All with out ever writing SQL.This is really incredible if you ever had to write SQL to interact with a database! Active Record completely eliminates that whole layer of thinking.</p>

<p>Here&rsquo;s a simple example of the power and convenience of Active Record. Here is a simple table and it&rsquo;s model.</p>

<p><strong>dogs table</strong>(tables are always named in plural form)</p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
  </tr>
</table>


<p><strong>Dog model</strong> dog.rb (model names are always singular)</p>

<pre><code class="ruby">class Dog &lt; ActiveRecord::Base
end
</code></pre>

<p>Notice the Dog class is completely empty aside from the fact that it inherits from ActiveRecord::Base. The Dog class now has access to all the Active Record methods. If we wanted to select a row form the dogs table you can do so like this in rails console.</p>

<pre><code>irb&gt; dog = Dog.first
=&gt; &lt;Dog id: 1, name: "Rocky", weight: "15", age: "5"&gt;
</code></pre>

<p>This would return the first record in the &lsquo;dogs&rsquo; table. Active record has many other methods for returning rows form a table. Let&rsquo;s say we wan&rsquo;t the dog with an ID of 2</p>

<pre><code>irb&gt; dog = Dog.find(2)
=&gt; &lt;Dog id: 2, name: "Gump", weight: "45", age: "11"&gt;
</code></pre>

<p> Active Record also creates getter and setter methods for every column in the database table. So you can do things like this.</p>

<pre><code>irb&gt; dog.name
=&gt; "Gump"
irb&gt; dog.age
=&gt; "11"
irb&gt; dog.age = 12
=&gt; 12
irb&gt; dog
=&gt; [id: 2, name: "Gump", weight: "45", age: "12"]
</code></pre>

<p>Active record makes working with data a breeze. If we had to write SQL just to do the few examples I have above it would take way more code and would be way less pretty.</p>

<h3>The other great thing about Active Record is Associations</h3>

<p>Associations are used to create relationships between tables. There are 2 ways tables can be related</p>

<ul>
<li>1 to Many</li>
<li>Many to Many</li>
</ul>


<h4>Here is another table that can relate to the dogs table:</h4>

<p><strong>owners</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Frank</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Rachel</td>
  </tr>
</table>


<p>In this example we&rsquo;re going to say a dog has one owner, and an owner can have many dogs. This a a typical one to many relationship. The Dog and Owner models will look like this.</p>

<p><strong>Dog model</strong></p>

<pre><code class="ruby">class Dog &lt; ActiveRecord::Base
  belongs_to :owner
end
</code></pre>

<p><strong>Owner model</strong></p>

<pre><code class="ruby">class Owner &lt; ActiveRecord::Base
  has_many :dogs
end
</code></pre>

<p>Doing this will require one column to be added to the dogs table. A foreign key of <code>owner_id</code></p>

<p><strong>dogs table</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
    <th>owner_id</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
    <td>1</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
    <td>1</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
    <td>2</td>
  </tr>
</table>


<p>Rails will automatically know to use <code>owner_id</code> because we stated in the Dog model that a dog <code>belongs_to :owner</code> . The foreign key column always goes in the table on the <code>belongs_to</code> side of a relation.</p>

<p>Now we can do things like this.</p>

<pre><code>irb&gt; dog = Dog.find(2)
=&gt; &lt;Dog id: 2, name: "Gump", weight: "45", age: "12"&gt;
irb&gt; dog.owner.name
=&gt; "Frank"
irb&gt; owner = Owner.last
=&gt; &lt;Owner id: 2, name: "Rachel"&gt;
irb&gt; owner.dogs.first.name
=&gt; "Jenny"
</code></pre>

<p>So that&rsquo;s a little taste of what active record can do and how classes can be associated.</p>

<p>Here is a great reference for all Active Record - <a href="http://guides.rubyonrails.org/active_record_basics.html">http://guides.rubyonrails.org/active_record_basics.html</a></p>

<p>Rails uses a lot of conventions to make all of this magic work, but if you can remember them you can be very productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Say Hello to Rails and All of It's Magic!]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic/"/>
    <updated>2014-06-25T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic</id>
    <content type="html"><![CDATA[<p><img src="/images/roads-22.jpg"></p>

<p>I&rsquo;m through the first week of course 2 with Tealeaf Academy (Rapid prototyping with Ruby on Rails) It&rsquo;s been very demanding to say the least, but still very fun and engaging.  There was a lot of information to absorb and I learned a lot.</p>

<p>Before week 1 officially started, I was asked to read this <a href="http://guides.rubyonrails.org/getting_started.html">Getting Started with Rails guide</a>. I did actually get through it and build the example project, but by the end I wasn&rsquo;t very confident about Rails, which is ok, because that&rsquo;s what the course is for.</p>

<!--more-->


<p>The first lecture in the course cleared a lot of things up for me. Ruby on Rails (or RoR) is basically split up into 5 main parts and follows a MVC  (Model View Controller) pattern:</p>

<h3>The five parts are:</h3>

<ol>
<li> The Router</li>
<li> The Controller</li>
<li> The Model</li>
<li> The Database</li>
<li> The View</li>
</ol>


<h2>Here is my quick explanation of  how rails works:</h2>

<ol>
<li> A HTTP request comes into the <strong>Router</strong></li>
<li> the router directs that request to the <strong>Controller</strong></li>
<li> depending on what is in the request, the **Controller will do 1 of 3 things

<ul>
<li>redirect to the router Router**</li>
<li>render a <strong>View</strong> template

<ul>
<li>or reach into the <strong>Model</strong>. The <strong>Model</strong> can then retrieve data from the <strong>Database</strong> , send that back to the  <strong>Controller</strong>, and then render a <strong>View</strong></li>
</ul>
</li>
<li><h4>Here is a nice diagram of rails:**</h4></li>
</ul>
</li>
</ol>


<p><img src="/images/request_response_mvc.jpg"></p>

<h3>This part of the course focused mostly on the Model layer</h3>

<p>Here is what a simple model looks like in Rails</p>

<pre><code class="ruby ">class Post &lt; ActiveRecord::Base
end
</code></pre>

<p>Every model in Rails corresponds to a table in the database. The above model would belong to a table named &lsquo;posts&rsquo;. Rails has several conventions for naming models, classes, tables, and lots of other things. This is what allows the &ldquo;Rails Magic&rdquo; to happen. For a model three naming conventions must be followed.</p>

<ol>
<li> the name of the model file must be singular, lowercase, and snake case. So the Post model would be in a file called &lsquo;post.rb&rsquo;. A &lsquo;PostCategory&rsquo; model would be in &lsquo;post_category.rb&rsquo;</li>
<li> the name of the model class should be singular and CamelCase. ex: &lsquo;Post&rsquo;, or &lsquo;PostCategory&rsquo;</li>
<li> the name of the table must be  plaural form, and snake case. ex: &lsquo;posts, or &#8216;post_categories&rsquo;</li>
</ol>


<p>Figuring out the name Rails expects can sometimes be tricky, so there is a built in method you can use in rails console to figure those tricky ones out. Check out the code below in rails console.</p>

<pre><code>&gt; "Goose".tableize
=&gt; "gooses"
</code></pre>

<p>The model name here is Goose. Calling the <code>tableize</code> method on the string &ldquo;Goose&rdquo; tells you rails expects the table to be called &lsquo;gooses&rsquo;. The model file for this would be goose.rb .</p>

<p>To create tables in Rails there is a great built in feature called <strong><em>migrations</em></strong>. To create a migration you first run this command in termianl in your project directory</p>

<pre><code>$ rails generate migration create_gooses
</code></pre>

<p>In this example gooses is the table name. If you wanted to make a posts table you would just replace gooses with posts.  This will create a file in the <code>db/migrate</code> directory that looks like this:</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
    end
  end
end
</code></pre>

<p>Now lets give gooses a name, height, and timestamps columns.</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
      t.string :name
      t.integer :height
      t.timestamps
    end
  end  
end
</code></pre>

<ol>
<li> t.string :name (creates a column called name with a type of string)</li>
<li> t.integer :height (creates a column called height with a type of integer)</li>
<li> t.timestamps creates two column (created_at and updated_at) Rails automatially fills these in when records are created or updated. Pretty neat right!</li>
</ol>


<p>After you finish creating your migration file you run this command in your terminal</p>

<pre><code>$ rake db:migrate
</code></pre>

<p>If you have bundler installed you might need to run</p>

<pre><code>$ bundle exec rake db:migrate
</code></pre>

<p>This will create the table in your database, and you never have to write a single line of SQL, now that&rsquo;s awesome!</p>

<h4>gooses table</h4>

<table class="table">
  <tr>
    <th>id</th>
    <th>name</th>  
    <th>height</th>
    <th>created_at</th>
    <th>updated_at</th>
  </tr>  
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
</table>


<p>As you can see above, the rails automaically added <em>id</em> , <em>created_at</em>, and <em>updated_at</em> columns.</p>

<p><p>Now that we have a table set up all we have to go is create a model to go with it. Remember, the model is there to get data out of that table. Here is what the <em>Goose</em> model will look like .</p>

<pre><code class="ruby Goose Model">class Goose &lt; ActiveRecord::Base
end
</code></pre>

<p>I know there&rsquo;s not much to that, but it&rsquo;s all you&rsquo;ll need to interact with the gooses table. There are 2 things to remember when creating this model.</p>

<ul>
<li>the file name must be singular and in snake_case</li>
<li>the class name must be singular and in CamelCase</li>
</ul>


<p>This model will give the entire application access to several getter and setter as well as other methods for objects created from the Goose class. And several methods that can be used on the Goose class. Some examples are:</p>

<ol>
<li> goose.name</li>
<li> goose.name =</li>
<li> Goose.first</li>
<li> Goose.find(2)</li>
<li> Goose.new(name: &lsquo;fred&rsquo;, height: &lsquo;10&rsquo;)</li>
</ol>


<p>In this post I talked a little about the MVC pattern in rails, the flow of Rails, creating tables with migrations, and models. In the next post I&rsquo;ll talk about model associations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting It All Together. Web Development With Ruby, HTTP, Ajax , MVC With Sinatra]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra/"/>
    <updated>2014-06-17T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://www.duskyswondersite.com/wp-content/uploads/2014/07/North-Queensferry-Fife-Scotland-by-David-Cation.jpg">http://www.duskyswondersite.com/wp-content/uploads/2014/07/North-Queensferry-Fife-Scotland-by-David-Cation.jpg</a>&#8221;></p>

<p>I just finished up <a href="http://www.gotealeaf.com">Tealeaf Academy</a> course 1 of 3 . It&rsquo;s has been an outstanding learning experience! I feel like I&rsquo;ve come really far as a programmer, and I can take on small projects in Ruby on my own. When I say small projects I mean a simple program that doesn&rsquo;t require a database (databases are in course 2), like a game. I&rsquo;ve done blackjack and tic-tac-toe, so I guess the next game could be something like checkers or hangman. If you have any ideas feel free to leave them in the comments. Maybe we could collaborate on a game or other small project. It might be a fun side project.</p>

<p>Anyway&hellip;.here&rsquo;s a recap of what I&rsquo;ve learned since my last post. Here is the <a href="http://infinite-waters-7065.herokuapp.com">Blackjack Game</a> I made while learning all of these things. <!--more--></p>

<h2>HTTP</h2>

<p>The heart of web development is HTTP. It&rsquo;s a stateless protocol for communicating between distributed systems.  In the case of web development it&rsquo;s usually a server and a client (browser). <a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">This article</a> goes into detail about HTTP.</p>

<h2>Sinatra</h2>

<p>Sinatra is a lightweight MCV framework for ruby. Below is a diagram of the MVC arcitecture.</p>

<p><img src="/images/sinatra.jpg"></p>

<p>In Sinatra , HTTP request are handled via routs. Routs are stored in controller, then depending on what the rout does, either a template is rendered or the request is redirected to another rout. You can read the Sinatra documentation <a href="http://www.sinatrarb.com/intro.html">here</a>.</p>

<h2>Helper methods in Sinatra</h2>

<p>Sinatra gives you the ability to create helper methods. These can be used in the controller and view templates. These are really handy for cleaning up your code and re-factoring.</p>

<h2>AJAX</h2>

<p>Ajax uses javascript to reload a section of a page without having to reload everything on the page. Below is an example of a simple ajax function with jQuery.</p>

<pre><code class="javascript A simple AjAX call with jQuery">function player_hits(){
$(document).on("click", "form#hit_form input", function(){ 

$.ajax({
type: "POST",
url: "/game/player/hit"
}).done(function(msg){
$("#game").replaceWith(msg);
});
return false;
});
}
</code></pre>

<p>Course one has been challenging and I spent a LOT of time on it. I built 3 versions of  the Blackjack game.</p>

<ol>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/blackjack.rb">command line - procedural</a></li>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/OO_blackjack.rb">command line - Object Oriented</a></li>
<li> <a href="http://infinite-waters-7065.herokuapp.com">web based procedural with Sinatra</a></li>
</ol>


<p>I feel like I&rsquo;ve come a long way, but I know it&rsquo;s just the beginning. My next post with be about Ruby on Rails!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Steps With Ruby and Web Development]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/12/first-steps-with-ruby-and-tealeaf-academy/"/>
    <updated>2014-06-12T14:14:11+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/12/first-steps-with-ruby-and-tealeaf-academy</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://www.duskyswondersite.com/wp-content/uploads/2014/07/exqui-image-tree-and-hand.jpg">http://www.duskyswondersite.com/wp-content/uploads/2014/07/exqui-image-tree-and-hand.jpg</a>&#8221;></p>

<blockquote><h4>All I want to do is be a professional web developer, make some money, love what I do, and live happily ever after.</h4></blockquote>

<p>Not to much to ask right? So where do I start? My journey actually began a while ago and I have some basic knowledge. I know HTML, CSS, some PHP and a little javascrpt. But that alone is not enough to get a job in today&rsquo;s market. Now adays, you need more that that. There are basically two types of web developers.</p>

<ol>
<li> Front End</li>
<li> Back End</li>
</ol>


<p>The differences are ilustrated very well in this <a href="http://www.youtube.com/watch?v=zXqs6X0lzKI">youtube video</a>.</p>

<!--more-->


<p>A <strong>front end</strong> developer deals with what you see in your web browser. The HTML, CSS and Javascript. They do things like design and build sites and user interface.</p>

<p>A <strong>back end</strong> developer deals with the server side scripting, databases, and behind the sceens magic that powers the web. Especially on sites where the user creates the content (like Facebook for example).</p>

<h3>I became interested in back end a long time ago when I learned you can create a site dynamically from a database.</h3>

<p>For example, if you have a site that sells video games, you can have a database with all the games and use it to dynamically create a page for every game in the database, while actually only having to write code for  a single page. Imagine if you have to code up a separate page for every game in your database. And then imagine you have 5000 games! Yikes!</p>

<p>So to me, there is a certain kind of magicall-ness to back end web development. I know it&rsquo;s not as cool as levitating a super model, but it&rsquo;s magical to me. So I know I want to do <strong>back end</strong>, but how do I learn that? At the time of this epiphany(around 2006), the answer to that was to learn <strong>PHP</strong>. I know that was a long time ago, so you must be thinking I&rsquo;m an expert PHP guy right? Sorry to say, that&rsquo;s not the case.</p>

<p>I used to make sites in Dreamweaver, and Dreamweaver has some built in tools to write PHP for you. So for a long while that&rsquo;s what I did. Which in the end, got me no where because I really didn&rsquo;t know what the heck I was doing. I didn&rsquo;t decide to actually try to learn how to use PHP the right way until about a year ago. I started by watching videos on Lynda.com . They were good, but I was on my own, since Lynda.com didn&rsquo;t really have any instructor feedback or assistance. I got stuck A LOT and kind of gave up on that. Then I discoverd an online school called O&#8217;Reilly School of Technology. They happed to have a cirtificate course called PHP/SQL Programming . PERFECT! Right? Well after about a year of doing this course ( with a few little breaks here and there) I didn&rsquo;t feel it&rsquo;s going to make me the <strong><em>modern rockstar developer</em></strong> I am striving to be. There are a few issues I have with them, but I wont go into that here.</p>

<p>Fast forward to a couple of months ago (5/2014). I&rsquo;ve come to the conclusion I need a school, with real teachers, and an active commuity of students , AND a cariculum designed to give me the skill set of a <strong>modern web developer</strong>. I found (through a lot of searching) **<a href="www.gotealeaf.com">Tealeaf Academy shcool for Ruby on Rails Developers</a>! They offer a four month/ three course program that takes you from zero to Ruby super hero. Now I&rsquo;m not saying I believe  I&rsquo;m going to finish the program and then get a job the next day. I know it will take a lot of work after the program is over. You don&rsquo;t get years of experience in four months obviously, but I do think it will give me the foundation to get those years of experience.  So this is where I&rsquo;m at. I&rsquo;ve been doing the course for the last month and I couldn&rsquo;t be happier.</p>

<p>Here is a list of what I&rsquo;ve learned so far.</p>

<h3>My time spent learning PHP was not wasted!</h3>

<p>Ruby and PHP are not that different in some ways. They are both programming languages. They use the same concepts. Ruby is just a lot more pleasent to write (in my opinion). My first days with Tealeaf were spent on the pre-course. It&rsquo;s meant to be an introducion to programming and ruby. Since I allready know the bascics of programming, this was pretty easy for me. Ruby has it&rsquo;s own syntax of course, but it&rsquo;s very easy to pick up and very easy to read.</p>

<p><strong>Here&rsquo;s a line of ruby code</strong></p>

<pre><code class="ruby Ruby">cards.each { |card| puts card }
</code></pre>

<p>Easy right? Here&rsquo;s the same thing in PHP</p>

<pre><code class="php PHP">for($i = 0; $i&lt;count($cards); $i++){
echo $cards[$i];
}
</code></pre>

<p>It&rsquo;s doing the same thing, but the Ruby code is so much easier to read and write, not to mention faster.</p>

<h3>Command line</h3>

<p>I finally learned to use the command line! It&rsquo;s really not that hard. The commands I find myself using most are</p>

<ul>
<li>cd - change directory</li></li>
<li>ls - list files in the current directory</li></li>
<li>mkdir - make a directory</li></li>
<li>touch - create a file</li></li>
<li>git - use git to make commits and push to git hub</li></li>
</ul>


<h3>Git and Github</h3>

<p>If you want to be a modern web developer you HAVE to learn to use Git and Github. Github is used for storing your code and allows you to see all the versions you saved. It also allows teams to work on collaborate on a project and people to download your code to play with it. Very important and very big deal in the web development world.</p>

<h3>Time management for web developers</h3>

<p>I know this has nothing to do with Ruby, but it&rsquo;s worth mentioning. As it turns out there are two kinds of people in the business world. Makers and Managers,  and they need to manage their time differently to achieve maximum efficiency. Managers can do the 9-5 thing and cut up their day into nice little one or two hour chunks. Makers on the other hand need a nice long chunk of time to get something done. They don&rsquo;t do well with interruptions. The more they can focus on their craft, the happier they will be. I know this is true from personal experience. I love having a nice Saturday all to myself to work on a project. Here&rsquo;s an article all about this phenomenon <a href="http://www.paulgraham.com/makersschedule.html">http://www.paulgraham.com/makersschedule.html</a></p>

<h3>How to build an application from start to finish</h3>

<p>There is a certain workflow to efficiently writing a program . It&rsquo;s very difficult to just start witing code. You need to figure out the logic and then turn that logic into working code. Here is the magic formula.</p>

<ul>
<li>Come up with requirements/specifications, which will determine the scope.</li>
<li>Application logic; sequence of steps. Write the logic in psudo code</li>
<li>Translation of those steps into real code</li>
<li>Run code to verify logic.</li>
</ul>


<h3>Object Oriented Programming with Ruby (OOP)</h3>

<p>This is a subject that I&rsquo;ve been wanting to learn, and struggling with for a long time (in PHP), and I&rsquo;m happy to say I finally get it. Thanks to Tealeaf and Ruby. The idea is with OOP is you create classes for a program and create objects from the classes. Classes are like blueprints for a house,and objects are like the houses made from the blueprints. There are some important key words in Ruby with OOP.</p>

<ul>
<li>class - the blue print for objects</li>
<li>.new - keyword to create new objects</li>
<li>initialize - this is a special method that is run every time an object is created</li>
<li>attr_accessor - this creates getter and setter methods for instance variables</li>
<li>module - modules define behaviors that can be mixed into classes</li>
<li>include - the keyword for mixing modules into classes</li>
</ul>


<p>There&rsquo;s a lot more to it than that, but those are some of the basics in Ruby OOP Here is an example of a simple class and object</p>

<pre><code class="ruby">class Dog{
  attr_accessor :name

  def intialize(n)
    @name = n
  end
}

fido = Dog.new("Fido")
</code></pre>

<h3>This is where I was at after 2 weeks of Tealeaf Academy</h3>

<p>I now have basic knowleghe of Ruby, OOP in Ruby, and I learned some valuable web developent skills such as command line and git. I completes a few projects as well.</p>

<ul>
<li><a href="https://github.com/doug7410/tealeaf_course_1/blob/master/blackjack.rb"><strong>Procedural Blackjack Game</strong></a></li>
<li><a href="https://github.com/doug7410/tealeaf_course_1/blob/master/tic_tac_toe.rb"><strong>Tic-Tac-Toe</strong></a></li>
<li><a href="https://github.com/doug7410/tealeaf_course_1/blob/master/OO_blackjack.rb"><strong>Object Oriented Blackjack Game</strong></a></li>
</ul>


<p>I&rsquo;m pretty happy with myself. This post is getting pretty long winded, so I&rsquo;ll cut it off here. Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>

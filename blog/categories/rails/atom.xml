<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Doug S.]]></title>
  <link href="http://doug7410.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://doug7410.github.io/"/>
  <updated>2014-08-03T21:50:35+00:00</updated>
  <id>http://doug7410.github.io/</id>
  <author>
    <name><![CDATA[Doug Steinberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tealeaf - Rapid Prototyping With Ruby on Rails Cousre Done!]]></title>
    <link href="http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done/"/>
    <updated>2014-07-16T16:10:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/07/16/rapid-prototyping-with-ruby-on-rails-course-done</id>
    <content type="html"><![CDATA[<p><img src="/images/postit.jpg"></p>

<p>It&rsquo;s been a few weeks since I last posted about my journey to becoming a Ruby on Rails developer through <a href="http://gotealeaf.com">Tealeaf Academy</a> . At this point I&rsquo;m done with their second course &ldquo;Rapid Prototyping with Ruby on Rails&rdquo; . This blog post is actually my final assignment for the course. I have learned to build a basic rails app from start to finish and I&rsquo;ve even been able to apply some custom features that weren&rsquo;t discussed in the course. <!--more--></p>

<p>Here is the final project <a href="http://shielded-retreat-9536.herokuapp.com">http://shielded-retreat-9536.herokuapp.com</a>
Here is my code on GitHub - <a href="https://github.com/doug7410/postit-app">https://github.com/doug7410/postit-app</a></p>

<h4>I&rsquo;ve learned way to much to go into detail about everything so here is a summery of all the things I learned while building this rails application.</h4></h4>

<ul>
<li>Model View Controller</li>
<li>Rails Migrations</li>
<li>Active Record</li>
<li>Active Record Associations

<ul>
<li>1 to Many Associations</li>
<li>Many to Many associations</li>
<li>Polymorphic associations</li>
</ul>
</li>
<li>RESTful routes</li>
<li>Custom Routes</li>
<li>ERB templates</li>
<li>User Authentication with &ldquo;has_secure_password&rdquo;</li>
<li>Helper Methods</li>
<li>Modules</li>
<li>Creating a Gem</li>
<li>Rails flavored AJAX</li>
</ul>


<p>I&rsquo;m probably leaving some things out, so I might have to go back and edit that list. In my <a href="http://dsp-websolutions.com/portfolio/2014/06/25/journey-to-ror-developer-part-3">last post</a> I talked about MVC and Rails Migrations. Now I&rsquo;ll talk a little about <strong>Active Record</strong> and <strong>Associations</strong> .</p>

<h3>What is Active Record?</h3>

<p>Active record is an ORM (Object Relational Mapping system).  Active Record allows Rails to interact with a database and and also stores information about the relationships between tables in the database. All with out ever writing SQL.This is really incredible if you ever had to write SQL to interact with a database! Active Record completely eliminates that whole layer of thinking.</p>

<p>Here&rsquo;s a simple example of the power and convenience of Active Record. Here is a simple table and it&rsquo;s model.</p>

<p><strong>dogs table</strong>(tables are always named in plural form)</p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
  </tr>
</table>


<p><strong>Dog model</strong> dog.rb (model names are always singular)</p>

<pre><code class="ruby">class Dog &lt; ActiveRecord::Base
end
</code></pre>

<p>Notice the Dog class is completely empty aside from the fact that it inherits from ActiveRecord::Base. The Dog class now has access to all the Active Record methods. If we wanted to select a row form the dogs table you can do so like this in rails console.</p>

<pre><code>irb&gt; dog = Dog.first
=&gt; &lt;Dog id: 1, name: "Rocky", weight: "15", age: "5"&gt;
</code></pre>

<p>This would return the first record in the &lsquo;dogs&rsquo; table. Active record has many other methods for returning rows form a table. Let&rsquo;s say we wan&rsquo;t the dog with an ID of 2</p>

<pre><code>irb&gt; dog = Dog.find(2)
=&gt; &lt;Dog id: 2, name: "Gump", weight: "45", age: "11"&gt;
</code></pre>

<p> Active Record also creates getter and setter methods for every column in the database table. So you can do things like this.</p>

<pre><code>irb&gt; dog.name
=&gt; "Gump"
irb&gt; dog.age
=&gt; "11"
irb&gt; dog.age = 12
=&gt; 12
irb&gt; dog
=&gt; [id: 2, name: "Gump", weight: "45", age: "12"]
</code></pre>

<p>Active record makes working with data a breeze. If we had to write SQL just to do the few examples I have above it would take way more code and would be way less pretty.</p>

<h3>The other great thing about Active Record is Associations</h3>

<p>Associations are used to create relationships between tables. There are 2 ways tables can be related</p>

<ul>
<li>1 to Many</li>
<li>Many to Many</li>
</ul>


<h4>Here is another table that can relate to the dogs table:</h4>

<p><strong>owners</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Frank</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Rachel</td>
  </tr>
</table>


<p>In this example we&rsquo;re going to say a dog has one owner, and an owner can have many dogs. This a a typical one to many relationship. The Dog and Owner models will look like this.</p>

<p><strong>Dog model</strong></p>

<pre><code class="ruby">class Dog &lt; ActiveRecord::Base
  belongs_to :owner
end
</code></pre>

<p><strong>Owner model</strong></p>

<pre><code class="ruby">class Owner &lt; ActiveRecord::Base
  has_many :dogs
end
</code></pre>

<p>Doing this will require one column to be added to the dogs table. A foreign key of <code>owner_id</code></p>

<p><strong>dogs table</strong></p>

<table class="table">
  <tr>
    <th>ID</th>
    <th>Name</th>
    <th>Weight</th>
    <th>Age</th>
    <th>owner_id</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Rocky</td>
    <td>15</td>
    <td>5</td>
    <td>1</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Gump</td>
    <td>45</td>
    <td>11</td>
    <td>1</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Jenny</td>
    <td>35</td>
    <td>9</td>
    <td>2</td>
  </tr>
</table>


<p>Rails will automatically know to use <code>owner_id</code> because we stated in the Dog model that a dog <code>belongs_to :owner</code> . The foreign key column always goes in the table on the <code>belongs_to</code> side of a relation.</p>

<p>Now we can do things like this.</p>

<pre><code>irb&gt; dog = Dog.find(2)
=&gt; &lt;Dog id: 2, name: "Gump", weight: "45", age: "12"&gt;
irb&gt; dog.owner.name
=&gt; "Frank"
irb&gt; owner = Owner.last
=&gt; &lt;Owner id: 2, name: "Rachel"&gt;
irb&gt; owner.dogs.first.name
=&gt; "Jenny"
</code></pre>

<p>So that&rsquo;s a little taste of what active record can do and how classes can be associated.</p>

<p>Here is a great reference for all Active Record - <a href="http://guides.rubyonrails.org/active_record_basics.html">http://guides.rubyonrails.org/active_record_basics.html</a></p>

<p>Rails uses a lot of conventions to make all of this magic work, but if you can remember them you can be very productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Say Hello to Rails and All of It's Magic!]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic/"/>
    <updated>2014-06-25T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic</id>
    <content type="html"><![CDATA[<p><img src="/images/roads-22.jpg"></p>

<p>I&rsquo;m through the first week of course 2 with Tealeaf Academy (Rapid prototyping with Ruby on Rails) It&rsquo;s been very demanding to say the least, but still very fun and engaging.  There was a lot of information to absorb and I learned a lot.</p>

<p>Before week 1 officially started, I was asked to read this <a href="http://guides.rubyonrails.org/getting_started.html">Getting Started with Rails guide</a>. I did actually get through it and build the example project, but by the end I wasn&rsquo;t very confident about Rails, which is ok, because that&rsquo;s what the course is for.</p>

<!--more-->


<p>The first lecture in the course cleared a lot of things up for me. Ruby on Rails (or RoR) is basically split up into 5 main parts and follows a MVC  (Model View Controller) pattern:</p>

<h3>The five parts are:</h3>

<ol>
<li> The Router</li>
<li> The Controller</li>
<li> The Model</li>
<li> The Database</li>
<li> The View</li>
</ol>


<h2>Here is my quick explanation of  how rails works:</h2>

<ol>
<li> A HTTP request comes into the <strong>Router</strong></li>
<li> the router directs that request to the <strong>Controller</strong></li>
<li> depending on what is in the request, the **Controller will do 1 of 3 things

<ul>
<li>redirect to the router Router**</li>
<li>render a <strong>View</strong> template

<ul>
<li>or reach into the <strong>Model</strong>. The <strong>Model</strong> can then retrieve data from the <strong>Database</strong> , send that back to the  <strong>Controller</strong>, and then render a <strong>View</strong></li>
</ul>
</li>
<li><h4>Here is a nice diagram of rails:**</h4></li>
</ul>
</li>
</ol>


<p><img src="/images/request_response_mvc.jpg"></p>

<h3>This part of the course focused mostly on the Model layer</h3>

<p>Here is what a simple model looks like in Rails</p>

<pre><code class="ruby ">class Post &lt; ActiveRecord::Base
end
</code></pre>

<p>Every model in Rails corresponds to a table in the database. The above model would belong to a table named &lsquo;posts&rsquo;. Rails has several conventions for naming models, classes, tables, and lots of other things. This is what allows the &ldquo;Rails Magic&rdquo; to happen. For a model three naming conventions must be followed.</p>

<ol>
<li> the name of the model file must be singular, lowercase, and snake case. So the Post model would be in a file called &lsquo;post.rb&rsquo;. A &lsquo;PostCategory&rsquo; model would be in &lsquo;post_category.rb&rsquo;</li>
<li> the name of the model class should be singular and CamelCase. ex: &lsquo;Post&rsquo;, or &lsquo;PostCategory&rsquo;</li>
<li> the name of the table must be  plaural form, and snake case. ex: &lsquo;posts, or &#8216;post_categories&rsquo;</li>
</ol>


<p>Figuring out the name Rails expects can sometimes be tricky, so there is a built in method you can use in rails console to figure those tricky ones out. Check out the code below in rails console.</p>

<pre><code>&gt; "Goose".tableize
=&gt; "gooses"
</code></pre>

<p>The model name here is Goose. Calling the <code>tableize</code> method on the string &ldquo;Goose&rdquo; tells you rails expects the table to be called &lsquo;gooses&rsquo;. The model file for this would be goose.rb .</p>

<p>To create tables in Rails there is a great built in feature called <strong><em>migrations</em></strong>. To create a migration you first run this command in termianl in your project directory</p>

<pre><code>$ rails generate migration create_gooses
</code></pre>

<p>In this example gooses is the table name. If you wanted to make a posts table you would just replace gooses with posts.  This will create a file in the <code>db/migrate</code> directory that looks like this:</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
    end
  end
end
</code></pre>

<p>Now lets give gooses a name, height, and timestamps columns.</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
      t.string :name
      t.integer :height
      t.timestamps
    end
  end  
end
</code></pre>

<ol>
<li> t.string :name (creates a column called name with a type of string)</li>
<li> t.integer :height (creates a column called height with a type of integer)</li>
<li> t.timestamps creates two column (created_at and updated_at) Rails automatially fills these in when records are created or updated. Pretty neat right!</li>
</ol>


<p>After you finish creating your migration file you run this command in your terminal</p>

<pre><code>$ rake db:migrate
</code></pre>

<p>If you have bundler installed you might need to run</p>

<pre><code>$ bundle exec rake db:migrate
</code></pre>

<p>This will create the table in your database, and you never have to write a single line of SQL, now that&rsquo;s awesome!</p>

<h4>gooses table</h4>

<table class="table">
  <tr>
    <th>id</th>
    <th>name</th>  
    <th>height</th>
    <th>created_at</th>
    <th>updated_at</th>
  </tr>  
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
</table>


<p>As you can see above, the rails automaically added <em>id</em> , <em>created_at</em>, and <em>updated_at</em> columns.</p>

<p><p>Now that we have a table set up all we have to go is create a model to go with it. Remember, the model is there to get data out of that table. Here is what the <em>Goose</em> model will look like .</p>

<pre><code class="ruby Goose Model">class Goose &lt; ActiveRecord::Base
end
</code></pre>

<p>I know there&rsquo;s not much to that, but it&rsquo;s all you&rsquo;ll need to interact with the gooses table. There are 2 things to remember when creating this model.</p>

<ul>
<li>the file name must be singular and in snake_case</li>
<li>the class name must be singular and in CamelCase</li>
</ul>


<p>This model will give the entire application access to several getter and setter as well as other methods for objects created from the Goose class. And several methods that can be used on the Goose class. Some examples are:</p>

<ol>
<li> goose.name</li>
<li> goose.name =</li>
<li> Goose.first</li>
<li> Goose.find(2)</li>
<li> Goose.new(name: &lsquo;fred&rsquo;, height: &lsquo;10&rsquo;)</li>
</ol>


<p>In this post I talked a little about the MVC pattern in rails, the flow of Rails, creating tables with migrations, and models. In the next post I&rsquo;ll talk about model associations.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mvc | Doug S.]]></title>
  <link href="http://doug7410.github.io/blog/categories/mvc/atom.xml" rel="self"/>
  <link href="http://doug7410.github.io/"/>
  <updated>2014-08-04T13:55:26+00:00</updated>
  <id>http://doug7410.github.io/</id>
  <author>
    <name><![CDATA[Doug Steinberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Say Hello to Rails and All of It's Magic!]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic/"/>
    <updated>2014-06-25T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/25/say-hello-to-rails-and-all-the-magic</id>
    <content type="html"><![CDATA[<p><img src="/images/roads-22.jpg"></p>

<p>I&rsquo;m through the first week of course 2 with Tealeaf Academy (Rapid prototyping with Ruby on Rails) It&rsquo;s been very demanding to say the least, but still very fun and engaging.  There was a lot of information to absorb and I learned a lot.</p>

<p>Before week 1 officially started, I was asked to read this <a href="http://guides.rubyonrails.org/getting_started.html">Getting Started with Rails guide</a>. I did actually get through it and build the example project, but by the end I wasn&rsquo;t very confident about Rails, which is ok, because that&rsquo;s what the course is for.</p>

<!--more-->


<p>The first lecture in the course cleared a lot of things up for me. Ruby on Rails (or RoR) is basically split up into 5 main parts and follows a MVC  (Model View Controller) pattern:</p>

<h3>The five parts are:</h3>

<ol>
<li> The Router</li>
<li> The Controller</li>
<li> The Model</li>
<li> The Database</li>
<li> The View</li>
</ol>


<h2>Here is my quick explanation of  how rails works:</h2>

<ol>
<li> A HTTP request comes into the <strong>Router</strong></li>
<li> the router directs that request to the <strong>Controller</strong></li>
<li> depending on what is in the request, the **Controller will do 1 of 3 things

<ul>
<li>redirect to the router Router**</li>
<li>render a <strong>View</strong> template

<ul>
<li>or reach into the <strong>Model</strong>. The <strong>Model</strong> can then retrieve data from the <strong>Database</strong> , send that back to the  <strong>Controller</strong>, and then render a <strong>View</strong></li>
</ul>
</li>
<li><h4>Here is a nice diagram of rails:**</h4></li>
</ul>
</li>
</ol>


<p><img src="/images/request_response_mvc.jpg"></p>

<h3>This part of the course focused mostly on the Model layer</h3>

<p>Here is what a simple model looks like in Rails</p>

<pre><code class="ruby ">class Post &lt; ActiveRecord::Base
end
</code></pre>

<p>Every model in Rails corresponds to a table in the database. The above model would belong to a table named &lsquo;posts&rsquo;. Rails has several conventions for naming models, classes, tables, and lots of other things. This is what allows the &ldquo;Rails Magic&rdquo; to happen. For a model three naming conventions must be followed.</p>

<ol>
<li> the name of the model file must be singular, lowercase, and snake case. So the Post model would be in a file called &lsquo;post.rb&rsquo;. A &lsquo;PostCategory&rsquo; model would be in &lsquo;post_category.rb&rsquo;</li>
<li> the name of the model class should be singular and CamelCase. ex: &lsquo;Post&rsquo;, or &lsquo;PostCategory&rsquo;</li>
<li> the name of the table must be  plaural form, and snake case. ex: &lsquo;posts, or &#8216;post_categories&rsquo;</li>
</ol>


<p>Figuring out the name Rails expects can sometimes be tricky, so there is a built in method you can use in rails console to figure those tricky ones out. Check out the code below in rails console.</p>

<pre><code>&gt; "Goose".tableize
=&gt; "gooses"
</code></pre>

<p>The model name here is Goose. Calling the <code>tableize</code> method on the string &ldquo;Goose&rdquo; tells you rails expects the table to be called &lsquo;gooses&rsquo;. The model file for this would be goose.rb .</p>

<p>To create tables in Rails there is a great built in feature called <strong><em>migrations</em></strong>. To create a migration you first run this command in termianl in your project directory</p>

<pre><code>$ rails generate migration create_gooses
</code></pre>

<p>In this example gooses is the table name. If you wanted to make a posts table you would just replace gooses with posts.  This will create a file in the <code>db/migrate</code> directory that looks like this:</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
    end
  end
end
</code></pre>

<p>Now lets give gooses a name, height, and timestamps columns.</p>

<pre><code class="ruby">class CreateGooses &lt; ActiveRecord::Migration
  def change
    create_table :gooses do |t|
      t.string :name
      t.integer :height
      t.timestamps
    end
  end  
end
</code></pre>

<ol>
<li> t.string :name (creates a column called name with a type of string)</li>
<li> t.integer :height (creates a column called height with a type of integer)</li>
<li> t.timestamps creates two column (created_at and updated_at) Rails automatially fills these in when records are created or updated. Pretty neat right!</li>
</ol>


<p>After you finish creating your migration file you run this command in your terminal</p>

<pre><code>$ rake db:migrate
</code></pre>

<p>If you have bundler installed you might need to run</p>

<pre><code>$ bundle exec rake db:migrate
</code></pre>

<p>This will create the table in your database, and you never have to write a single line of SQL, now that&rsquo;s awesome!</p>

<h4>gooses table</h4>

<table class="table">
  <tr>
    <th>id</th>
    <th>name</th>  
    <th>height</th>
    <th>created_at</th>
    <th>updated_at</th>
  </tr>  
  <tr>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
    <th>&nbsp;</th>
  </tr>
</table>


<p>As you can see above, the rails automaically added <em>id</em> , <em>created_at</em>, and <em>updated_at</em> columns.</p>

<p><p>Now that we have a table set up all we have to go is create a model to go with it. Remember, the model is there to get data out of that table. Here is what the <em>Goose</em> model will look like .</p>

<pre><code class="ruby Goose Model">class Goose &lt; ActiveRecord::Base
end
</code></pre>

<p>I know there&rsquo;s not much to that, but it&rsquo;s all you&rsquo;ll need to interact with the gooses table. There are 2 things to remember when creating this model.</p>

<ul>
<li>the file name must be singular and in snake_case</li>
<li>the class name must be singular and in CamelCase</li>
</ul>


<p>This model will give the entire application access to several getter and setter as well as other methods for objects created from the Goose class. And several methods that can be used on the Goose class. Some examples are:</p>

<ol>
<li> goose.name</li>
<li> goose.name =</li>
<li> Goose.first</li>
<li> Goose.find(2)</li>
<li> Goose.new(name: &lsquo;fred&rsquo;, height: &lsquo;10&rsquo;)</li>
</ol>


<p>In this post I talked a little about the MVC pattern in rails, the flow of Rails, creating tables with migrations, and models. In the next post I&rsquo;ll talk about model associations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting It All Together. Web Development With Ruby, HTTP, Ajax , MVC With Sinatra]]></title>
    <link href="http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra/"/>
    <updated>2014-06-17T12:20:36+00:00</updated>
    <id>http://doug7410.github.io/blog/2014/06/17/putting-it-all-together-HTTP-MVC-Ajax-and-Sinatra</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://www.duskyswondersite.com/wp-content/uploads/2014/07/North-Queensferry-Fife-Scotland-by-David-Cation.jpg">http://www.duskyswondersite.com/wp-content/uploads/2014/07/North-Queensferry-Fife-Scotland-by-David-Cation.jpg</a>&#8221;></p>

<p>I just finished up <a href="http://www.gotealeaf.com">Tealeaf Academy</a> course 1 of 3 . It&rsquo;s has been an outstanding learning experience! I feel like I&rsquo;ve come really far as a programmer, and I can take on small projects in Ruby on my own. When I say small projects I mean a simple program that doesn&rsquo;t require a database (databases are in course 2), like a game. I&rsquo;ve done blackjack and tic-tac-toe, so I guess the next game could be something like checkers or hangman. If you have any ideas feel free to leave them in the comments. Maybe we could collaborate on a game or other small project. It might be a fun side project.</p>

<p>Anyway&hellip;.here&rsquo;s a recap of what I&rsquo;ve learned since my last post. Here is the <a href="http://infinite-waters-7065.herokuapp.com">Blackjack Game</a> I made while learning all of these things. <!--more--></p>

<h2>HTTP</h2>

<p>The heart of web development is HTTP. It&rsquo;s a stateless protocol for communicating between distributed systems.  In the case of web development it&rsquo;s usually a server and a client (browser). <a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">This article</a> goes into detail about HTTP.</p>

<h2>Sinatra</h2>

<p>Sinatra is a lightweight MCV framework for ruby. Below is a diagram of the MVC arcitecture.</p>

<p><img src="/images/sinatra.jpg"></p>

<p>In Sinatra , HTTP request are handled via routs. Routs are stored in controller, then depending on what the rout does, either a template is rendered or the request is redirected to another rout. You can read the Sinatra documentation <a href="http://www.sinatrarb.com/intro.html">here</a>.</p>

<h2>Helper methods in Sinatra</h2>

<p>Sinatra gives you the ability to create helper methods. These can be used in the controller and view templates. These are really handy for cleaning up your code and re-factoring.</p>

<h2>AJAX</h2>

<p>Ajax uses javascript to reload a section of a page without having to reload everything on the page. Below is an example of a simple ajax function with jQuery.</p>

<pre><code class="javascript A simple AjAX call with jQuery">function player_hits(){
$(document).on("click", "form#hit_form input", function(){ 

$.ajax({
type: "POST",
url: "/game/player/hit"
}).done(function(msg){
$("#game").replaceWith(msg);
});
return false;
});
}
</code></pre>

<p>Course one has been challenging and I spent a LOT of time on it. I built 3 versions of  the Blackjack game.</p>

<ol>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/blackjack.rb">command line - procedural</a></li>
<li> <a href="https://github.com/doug7410/tealeaf_course_1/blob/master/OO_blackjack.rb">command line - Object Oriented</a></li>
<li> <a href="http://infinite-waters-7065.herokuapp.com">web based procedural with Sinatra</a></li>
</ol>


<p>I feel like I&rsquo;ve come a long way, but I know it&rsquo;s just the beginning. My next post with be about Ruby on Rails!</p>
]]></content>
  </entry>
  
</feed>
